import aiogram
import sqlite3
import math
import random
from random import randint
import logging
import time
from asyncio import sleep
from matplotlib.pyplot import box
import timedelta
import datetime
from time import gmtime, strftime
from time import localtime
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
import os, re, configparser, requests
from aiogram.types import ContentType
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.utils.markdown import quote_html
from aiogram.dispatcher.handler import CancelHandler, current_handler
from aiogram.dispatcher.filters import Text
from gtts import gTTS
import config
import users
import chats
from telegram_bot_pagination import InlineKeyboardPaginator
from alive import keep_alive

bot = aiogram.Bot(config.token, parse_mode='HTML')
dp = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)


#–°—Ç–∞—Ç–∞
@dp.message_handler(commands=['—é–∑–µ—Ä—ã', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'stats', 'users'],
                    commands_prefix='!./')
async def statistic(message: types.Message):
    us = users.cursor.execute("SELECT * FROM users").fetchall()
    ch = chats.cursor.execute("SELECT * FROM chats").fetchall()
    await message.answer(f'<b>USERS: {len(us)}</b>\n<b>GROUPS: {len(ch)}</b>')


#–ü–∏–Ω–≥
@dp.message_handler(commands=['ping', '–ø–∏–Ω–≥'], commands_prefix=["/", "!"])
async def ping(message: types.Message):
    a = time.time()
    bot_msg = await message.answer(f'–ü—Ä–æ–≤–µ—Ä—è—é –ø–∏–Ω–≥...')
    if bot_msg:
        b = time.time()
        await bot_msg.edit_text(f'–ü–∏–Ω–≥ –±–æ—Ç–∞: {round((b-a)*1000)} –º—Å.')


#botadmins_cmd
@dp.message_handler(commands=['botadmins'])
async def botadmins_cmd(message: types.Message):
    await message.reply(f'{config.botadmins}')


#start_cmd
@dp.message_handler(commands=['help'])
async def help_cmd(message: types.Message):
    await message.reply(f"""–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –¥–æ—Ä–æ–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–∞ SUNRISE üåÑ
–î–∞–Ω–Ω—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—è—Ö, —É–¥–∞—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!
üë•üì¢ –û—Ñ—Ñ—Ç–æ–ø —á–∞—Ç - @sunrise_offtop
üë®‚Äçüíªüì¢ –ß–∞—Ç —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏ - @sunrise_help_chat
üîéüí¨ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª -
üóíÔ∏è‚úÖ –°–∞–π—Ç (—Å–∞–π—Ç –±–æ—Ç–∞) -

üë®‚Äçüíª‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–æ—Ç–∞: /botadmins

üîé –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –Ω–∞–ø–∏—Å–∞–≤:
/cmd_rp - —Å–ø–∏—Å–æ–∫ —Ä–ø –∫–æ–º–∞–Ω–¥ üí¨;
/cmd_basic - –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ üóíÔ∏è;
/cmd_admins - –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞ üë§;
/cmd_games - —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ üéÆ.
""")


@dp.message_handler(commands=['cmd_games'])
async def cmd_games(message):
    await message.reply(f"""üéÆ –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞:
<code>–î–∞—Ä—Ç—Å - (—Å—Ç–∞–≤–∫–∞) –ò–≥—Ä–∞ –≤ –¥–∞—Ä—Ç—Å üéØ
–§—É—Ç - (—Å—Ç–∞–≤–∫–∞) –ò–≥—Ä–∞ –≤ —Ñ—É—Ç–±–æ–ª ‚öΩ
–ë–∞—Å–∫–µ—Ç - (—Å—Ç–∞–≤–∫–∞) –ò–≥—Ä–∞ –≤ –±–∞—Å–∫–µ—Ç–±–æ–ª üèÄ
–ë–æ—É–ª - (—Å—Ç–∞–≤–∫–∞) –ò–≥—Ä–∞ –≤ –±–æ—É–ª–∏–Ω–≥ üé≥
–ö–∞–∑–∏–Ω–æ - (—Å—Ç–∞–≤–∫–∞) –ò–≥—Ä–∞ –≤ –∫–∞–∑–∏–Ω–æ üé∞
–ö—É–± - [1-6] (—Å—Ç–∞–≤–∫–∞) –ò–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏ üé≤
–ö–∞–º–µ–Ω—å/Ô∏è–ù–æ–∂–Ω–∏—Ü—ã/–ë—É–º–∞–≥–∞ - (—Å—Ç–∞–≤–∫–∞) üóø‚úÇüìÉ
+–õ–µ–¥–µ–Ω–µ—Ü –∏–ª–∏ /led - —Ä–∞—Å—Ç–∏—Ç—å —Å–≤–æ–π –ª–µ–¥–µ–Ω–µ—Ü, –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞ üç≠</code>""",
                        parse_mode="html")


@dp.message_handler(commands="cmd_admins")
async def cmd_admins(message: types.Message):
    if message.chat.type == "private":
        await message.reply(f"‚ùóÔ∏è<b>–≠–¢–ò –ö–û–ú–ê–ù–î–´ –ü–†–ï–î–ù–ê–ó–ù–ê–ß–ï–ù–´ –î–õ–Ø –ß–ê–¢–û–í</b>‚ùóÔ∏è",
                            parse_mode="html")
    else:
        await message.reply(f"""
‚ùóÔ∏è<b>–ö–û–ú–ê–ù–î–´ –î–û–õ–ñ–ù–´ –ë–´–¢–¨ –û–¢–í–ï–¢–û–ú –ù–ê –°–û–û–ë–©–ï–ù–ò–ï</b>‚ùóÔ∏è
–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:
<code>/mute - –∑–∞—Ç–∫–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/ban - –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/del - —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</code>

–ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
<code>/unmute - —Ä–∞–∑–º—É—Ç
/unban - —Ä–∞–∑–±–∞–Ω</code>

‚ùóÔ∏è<b>–°–õ–ï–î–£–©–ò–ï –ö–û–ú–ê–ù–î–´ –£–ñ–ï –ù–ï –î–û–õ–ñ–ù–´ –ë–´–¢–¨ –û–¢–í–ï–¢–û–ú –ù–ê –°–û–û–ë–©–ï–ù–ò–ï</b>‚ùóÔ∏è
<code>/staff - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∫–∞–Ω–∞–ª–∞</code>""",
                            parse_mode="html")


character_pages = [
    """üë•üí¨ –†–ø –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:
<code>–ë—Ä–∞–∫</code> - —Ä–µ–ø–ª–∞–π –Ω–∞ —Ç–æ–π(-–º), —Å –∫–µ–º —Ö–æ—Ç–∏—Ç–µ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –±—Ä–∞–∫ üíç
<code>–†–∞–∑–≤–æ–¥</code> - —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç—å –±—Ä–∞–∫ —Å–æ —Å–≤–æ–µ–π –ø–∞—Ä–æ–π üíî
<code>–ú–æ–π –±—Ä–∞–∫</code> - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –±—Ä–∞–∫ üë∞‚ô•Ô∏èü§µ
<code>–ü–µ—Ä–µ–¥–∞—Ç—å</code> (—Å—É–º–º–∞) - –ø–µ—Ä–µ–¥–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª-–≤–æ –º–æ–Ω–µ—Ç üí∞
<code>–ö–ª—é—á–∏</code> - —Å –Ω–∏–º –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å üîë
<code>–ö—É–ø–∏—Ç—å</code> –ø–æ—Ä—Ç—Ñ–µ–ª—å ¬´1-3¬ª ¬´–∫–æ–ª-—Å—Ç–≤–æ¬ª –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π¬ª - –æ—á–µ–≤–∏–¥–Ω–æ
<code>–û—Ç–∫—Ä—ã—Ç—å</code> –ø–æ—Ä—Ç—Ñ–µ–ª—å ¬´1-3¬ª - "–¥–∞–∂–µ –Ω–µ –∑–Ω–∞—é"
<code>/promo</code> (–ü—Ä–æ–º–æ–∫–æ–¥) - –≤–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è üìÉ
<code>–ü–æ—Ü–µ–ª–æ–≤–∞—Ç—å</code> - –ø–æ—Ü–µ–ª—É–π
<code>–ë–∞–Ω–∫–∞–π</code> - –ø—Ä–∏–º–µ–Ω–∏—Ç—å –±–∞–Ω–∫–∞–π
<code>–†–∞—Å–µ–Ω–≥–∞–Ω</code> - —ë–±–Ω—É—Ç—å —Ä–∞—Å–µ–Ω–≥–∞–Ω–æ–º
<code>–ì–µ—Ç—Å—É–≥–∞</code> - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–µ—Ç—Å—É–≥—É
<code>–ß–º–æ–∫</code> - —á–º–æ–∫–Ω—É—Ç—å
<code>–ß–ø–æ–∫</code> - —á–ø–æ–∫–Ω—É—Ç—å
<code>–¢—ã–∫</code> - –¥–æ–µ–±–∞—Ç—å—Å—è –∏–ª–∏ —Ç—ã–∫–Ω—É—Ç—å
<code>–ü–Ω—É—Ç—å</code> - –º–∏—Å—Ç–µ—Ä –æ—á–µ–≤–∏–¥–Ω–æ—Å—Ç—å
<code>–õ–∏–∑–Ω—É—Ç—å</code> - –º–∏—Å—Ç–µ—Ä –æ—á–µ–≤–∏–¥–Ω–æ—Å—Ç—å
<code>–û—Ç—Å–æ—Å–∞—Ç—å</code> - –º–∏—Å—Ç–µ—Ä –æ—á–µ–≤–∏–¥–Ω–æ—Å—Ç—å
<code>!–ø–∏–Ω–≥</code> - –ø–∏–Ω–≥ –±–æ—Ç–∞""", """üë•üí¨ –†–ø –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:
<code>+ | ++ | +++</code> - –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ—Å–ø–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
<code>–ö–æ–Ω—Ñ–µ—Ç—ã</code> - –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∫–æ–Ω—Ñ–µ—Ç—ã
<code>–û—Ç–ª–∏–∑–∞—Ç—å</code> - –º–∏—Å—Ç–µ—Ä –æ—á–µ–≤–∏–¥–Ω–æ—Å—Ç—å
<code>–û—Ç–¥–∞—Ç—å—Å—è</code> - –º–∏—Å—Ç–µ—Ä –æ—á–µ–≤–∏–¥–Ω–æ—Å—Ç—å
<code>–†–∞–∑–¥–µ—Ç—å</code> - –º–∏—Å—Ç–µ—Ä –æ—á–µ–≤–∏–¥–Ω–æ—Å—Ç—å
<code>–û–±–Ω—è—Ç—å</code> - –º–∏—Å—Ç–µ—Ä –æ—á–µ–≤–∏–¥–Ω–æ—Å—Ç—å
<code>–í—ã–µ–±–∞—Ç—å</code> - –º–∏—Å—Ç–µ—Ä –æ—á–µ–≤–∏–¥–Ω–æ—Å—Ç—å
<code>–¢—Ä–∞—Ö–Ω—É—Ç—å</code> - –º–∏—Å—Ç–µ—Ä –æ—á–µ–≤–∏–¥–Ω–æ—Å—Ç—å
<code>–û—Ç—Ö—É—è—Ä–∏—Ç—å</code> - –º–∏—Å—Ç–µ—Ä –æ—á–µ–≤–∏–¥–Ω–æ—Å—Ç—å
<code>–ó–∞–µ–±–∞—à–∏—Ç—å</code> - –º–∏—Å—Ç–µ—Ä –æ—á–µ–≤–∏–¥–Ω–æ—Å—Ç—å
<code>–ö—É—Å—å</code> - –∫—É—Å—å–Ω—É—Ç—å
<code>–ü—Ä–æ–¥–∞—Ç—å</code> - –º–∏—Å—Ç–µ—Ä –æ—á–µ–≤–∏–¥–Ω–æ—Å—Ç—å"""
]


@dp.message_handler(commands=['cmd_rp'])
async def cmd_rp(message, page=1):

    paginator = InlineKeyboardPaginator(len(character_pages),
                                        current_page=page,
                                        data_pattern='character#{page}')

    await bot.send_message(message.chat.id,
                           character_pages[page - 1],
                           reply_markup=paginator.markup,
                           parse_mode='html')


@dp.callback_query_handler(lambda call: call.data.split('#')[0] == 'character')
async def cmd_rp_call(call):
    page = int(call.data.split('#')[1])
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    await cmd_rp(call.message, page)


@dp.message_handler(commands=['cmd_basic'])
async def cmd_basic(message):
    await message.reply(f"""üóíÔ∏è –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:
/start - –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º ‚úÖ
/help - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ üìÉ
/rp - –∫–∞—Å—Ç–æ–º–Ω–∞—è —Ä–ø –∫–æ–º–∞–Ω–¥–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å VIP —Å—Ç–∞—Ç—É—Å–æ–º) üíé
/name  - –≤–≤–µ–¥–∏—Ç–µ, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–π –Ω–∏–∫ üìù
/q - –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ üë®‚Äçüíª
/bio - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å VIP —Å—Ç–∞—Ç—É—Å–æ–º) üíé
/rules - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞ üìù
/chatinfo - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —á–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —á–∞—Ç–æ–≤ —Å VIP —Å—Ç–∞—Ç—É—Å–æ–º) üíé
–ë–∞–ª–∞–Ω—Å - –±–∞–ª–∞–Ω—Å
/bind - –ø—Ä–∏–≤—è–∑–∞—Ç—å —á–∞—Ç
/unbind - –æ—Ç–≤—è–∑–∞—Ç—å —á–∞—Ç
/use - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–≤–µ–ª–µ—á–∏—Ç–µ–ª—å
""",
                        parse_mode="Markdown")


#start_cmd
@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    id = message.from_user.id
    name = message.from_user.first_name
    username = message.from_user.username
    # status = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    # bio = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!"
    # chat = "–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω!"
    # promo = "–ù–µ—Ç"
    # vip = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!"
    now = datetime.datetime.now()
    regdata = now.strftime("%a, %d %b %Y")
    led_time = now.strftime('%H:%M:%S')
    chatid = message.chat.id
    chatname = message.chat.title
    chatusername = message.chat.username
    chatbio = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!"
    chatrules = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!"
    vipchat = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!"
    chatregdata = now.strftime("%a, %d %b %Y")
    users.cursor.execute(f"SELECT id FROM users WHERE id = '{id}'")
    if message.chat.type == 'supergroup':
        if users.cursor.fetchone() is None:
            users.cursor.execute(
                "INSERT INTO users (id, name, username, regdata, led_time) VALUES (?, ?, ?, ?, ?);",
                (id, name, username, regdata, led_time))
            users.connect.commit()
            await message.reply(
                f'–ü—Ä–∏–≤–µ—Ç {name}! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –±–æ—Ç–µ, —É–∑–Ω–∞–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤–≤–µ–¥—è /help'
            )
            await bot.send_message(
                -5695410762,
                f'üìä –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\nID: <code>{id}</code>\n–ù–∏–∫: {name}\n–Æ–∑–µ—Ä–Ω–µ–π–º: @{username}\n–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤ —á–∞—Ç–µ: @{chatusername}'
            )
        else:
            await message.reply(f'‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
        chats.cursor.execute(
            f"SELECT chatid FROM chats WHERE chatid = '{chatid}'")
        if chats.cursor.fetchone() is None:
            chats.cursor.execute(
                "INSERT INTO chats VALUES(?, ?, ?, ?, ?, ?, ?, ?);",
                (chatid, chatname, chatusername, chatbio, chatrules, 0,
                 vipchat, chatregdata))
            chats.connect.commit()
            await message.answer(f'‚úÖ –ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!')
            await bot.send_message(
                -5695410762,
                f'üìä –ù–æ–≤—ã–π —á–∞—Ç!\nCHAT_ID: <code>{chatid}</code>\n–ù–∞–∑–≤–∞–Ω–∏–µ: {chatname}\n–°—Å—ã–ª–∫–∞: {chatusername}'
            )
        else:
            pass
    elif message.chat.type == 'private':
        if users.cursor.fetchone() is None:
            users.cursor.execute(
                "INSERT INTO users (id, name, username, regdata, led_time) VALUES (?, ?, ?, ?, ?);",
                (id, name, username, regdata, led_time))
            users.connect.commit()
            await message.reply(
                f'–ü—Ä–∏–≤–µ—Ç {name}! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –±–æ—Ç–µ, —É–∑–Ω–∞–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤–≤–µ–¥—è /help'
            )
            await bot.send_message(
                -5695410762,
                f'üìä –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\nID: <code>{id}</code>\n–ù–∏–∫: {name}\n–Æ–∑–µ—Ä–Ω–µ–π–º: @{username}'
            )
        else:
            await message.reply(f'‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')


#–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
@dp.message_handler(commands=['–∏–Ω–≤', '–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', 'inv', '—Å–∫–ª–∞–¥'],
                    commands_prefix='!./')
async def invent(message: types.Message):
    id = message.from_user.id
    balance = users.cursor.execute("SELECT balance from users where id = ?",
                                   (message.from_user.id, )).fetchone()
    balance = (balance[0])
    coins = users.cursor.execute("SELECT coins from users where id = ?",
                                 (message.from_user.id, )).fetchone()
    coins = (coins[0])
    medal1 = users.cursor.execute("SELECT medal1 from users where id = ?",
                                  (message.from_user.id, )).fetchone()
    medal1 = (medal1[0])
    medal2 = users.cursor.execute("SELECT medal2 from users where id = ?",
                                  (message.from_user.id, )).fetchone()
    medal2 = (medal2[0])
    medal3 = users.cursor.execute("SELECT medal3 from users where id = ?",
                                  (message.from_user.id, )).fetchone()
    medal3 = (medal3[0])
    keys = users.cursor.execute("SELECT keys from users where id = ?",
                                (message.from_user.id, )).fetchone()
    keys = (keys[0])
    boxes1 = users.cursor.execute("SELECT boxes1 from users where id = ?",
                                  (message.from_user.id, )).fetchone()
    boxes1 = (boxes1[0])
    boxes2 = users.cursor.execute("SELECT boxes2 from users where id = ?",
                                  (message.from_user.id, )).fetchone()
    boxes2 = (boxes2[0])
    boxes3 = users.cursor.execute("SELECT boxes3 from users where id = ?",
                                  (message.from_user.id, )).fetchone()
    boxes3 = (boxes3[0])
    candy = users.cursor.execute("SELECT candy from users where id = ?",
                                 (message.from_user.id, )).fetchone()
    candy = (candy[0])
    await message.reply(f"""üìî –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:
<code>–ë–∞–ª–∞–Ω—Å: {balance} üí∞
–î–æ–Ω–∞—Ç: {coins} üí≥
–ö–ª—é—á–∏: {keys} üîë
–ö–æ–Ω—Ñ–µ—Ç: {candy} üç¨
–Ø—â–∏–∫ I —É—Ä–æ–≤–Ω—è: {boxes1} üíº
–Ø—â–∏–∫ II —É—Ä–æ–≤–Ω—è: {boxes2} üì¶
–Ø—â–∏–∫ III —É—Ä–æ–≤–Ω—è: {boxes3} üéÅ
–ú–µ–¥–∞–ª–µ–π –∑–∞ 1 –º–µ—Å—Ç–æ: {medal1} ü•á
–ú–µ–¥–∞–ª–µ–π –∑–∞ 2 –º–µ—Å—Ç–æ: {medal2} ü•à
–ú–µ–¥–∞–ª–µ–π –∑–∞ 3 –º–µ—Å—Ç–æ: {medal3} ü•â
</code>""",
                        parse_mode="html")


#–ü—Ä–æ—Ñ–∏–ª—å
#–ü—Ä–æ—Ñ–∏–ª—å
@dp.message_handler(commands=['–∏–Ω—Ñ–∞', '–∏–Ω—Ñ', '–∏–Ω—Ñ–æ', 'info', '—Å—Ç–∞—Ç–∞'],
                    commands_prefix='!./')
async def information(message: types.Message):
    id = message.from_user.id
    name = users.cursor.execute("SELECT name from users where id = ?",
                                (message.from_user.id, )).fetchone()
    name = (name[0])
    username = users.cursor.execute("SELECT username from users where id = ?",
                                    (message.from_user.id, )).fetchone()
    username = (username[0])
    balance = users.cursor.execute("SELECT balance from users where id = ?",
                                   (message.from_user.id, )).fetchone()
    balance = (balance[0])
    coins = users.cursor.execute("SELECT coins from users where id = ?",
                                 (message.from_user.id, )).fetchone()
    coins = (coins[0])
    led = users.cursor.execute("SELECT led from users where id = ?",
                               (message.from_user.id, )).fetchone()
    led = (led[0])
    status = users.cursor.execute("SELECT status from users where id = ?",
                                  (message.from_user.id, )).fetchone()
    status = (status[0])
    regdata = users.cursor.execute("SELECT regdata from users where id = ?",
                                   (message.from_user.id, )).fetchone()
    regdata = (regdata[0])
    marry = users.cursor.execute("SELECT marry from users where id = ?",
                                 (message.from_user.id, )).fetchone()
    marry = (marry[0])
    marry_time = users.cursor.execute(
        "SELECT marry_time FROM users WHERE id = ?",
        (message.from_user.id, )).fetchone()
    marry_time = (marry_time[0])
    res = users.cursor.execute("SELECT respect from users where id = ?",
                               (message.from_user.id, )).fetchone()
    res = (res[0])
    vip = users.cursor.execute("SELECT vip from users where id = ?",
                               (message.from_user.id, )).fetchone()
    vip = (vip[0])
    wins = users.cursor.execute("SELECT wins from users where id = ?",
                                (message.from_user.id, )).fetchone()
    wins = (wins[0])
    loses = users.cursor.execute("SELECT loses from users where id = ?",
                                 (message.from_user.id, )).fetchone()
    loses = (loses[0])
    games = users.cursor.execute("SELECT games from users where id = ?",
                                 (message.from_user.id, )).fetchone()
    games = (games[0])
    chat = users.cursor.execute("SELECT chat from users where id = ?",
                                (message.from_user.id, )).fetchone()
    chat = (chat[0])
    words = users.cursor.execute("SELECT words from users where id = ?",
                                 (message.from_user.id, )).fetchone()
    words = (words[0])

    profile_info = f"""‚Ä¢ –ù–∏–∫–Ω–µ–π–º: {name} üè∑Ô∏è
‚Ä¢ –Æ–∑–µ—Ä–Ω–µ–π–º: {username} 
‚Ä¢ –ë–∞–ª–∞–Ω—Å: {balance} üí∞
‚Ä¢ –î–æ–Ω–∞—Ç: {coins} üí≥
‚Ä¢ –£–≤–∞–∂–µ–Ω–∏–µ: {res} üìà
‚Ä¢ –°—Ç–∞—Ç—É—Å: {status} üë§
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –Ω–∞–ø–∏—Å–∞–Ω–æ: {words} üí¨
‚Ä¢ –†–∞–∑–º–µ—Ä –ª–µ–¥–µ–Ω—Ü–∞: {led} üç≠
‚Ä¢ VIP —Å—Ç–∞—Ç—É—Å: {vip} ‚öñÔ∏èü§ë
‚Ä¢ –í—Å–µ–≥–æ –∏–≥—Ä: {games} üé∞
‚Ä¢ –ü—Ä–æ–∏–≥—Ä—ã—à–µ–π | –ü–æ–±–µ–¥: {loses} üëé | {wins} üèÜ
‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {regdata} üìÉ"""

    if str(chat) == '–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω!':
        if games != 0:
            procent = int(wins) / int(games)
            prcnt = float(procent) * 100
            if marry == 0:
                profile_info += f"\n‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {prcnt}%"
                await message.reply(f"{profile_info}")
            else:
                marred = await bot.get_chat(marry)
                mname = quote_html(marred.full_name)
                # mname = "–ü—ë—Å"
                profile_info += f"\n‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {prcnt}%"
                profile_info += f"\n‚Ä¢ –í—ã –≤ –±—Ä–∞–∫–µ —Å {mname} ‚ù§Ô∏è \n‚Ä¢ –í—Ä–µ–º—è –±—Ä–∞–∫–∞: {marry_time}"
                await message.reply(f"{profile_info}")
        else:
            if marry == 0:
                await message.reply(f"{profile_info}")
            else:
                marred = await bot.get_chat(marry)
                mname = quote_html(marred.full_name)
                # mname = "–ü—ë—Å"
                profile_info += f"\n‚Ä¢ –í—ã –≤ –±—Ä–∞–∫–µ —Å {mname} ‚ù§Ô∏è \n‚Ä¢ –í—Ä–µ–º—è –±—Ä–∞–∫–∞: {marry_time}"

                await message.reply(f"{profile_info}")
    else:
        if games != 0:
            procent = int(wins) / int(games)
            prcnt = float(procent) * 100
            if marry == 0:
                profile_info += f"\n‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {prcnt}%"
                profile_info += f"\n‚Ä¢ –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω —á–∞—Ç–∞: <code>{chat}</code>"
                await message.reply(f"{profile_info}")
            else:
                marred = await bot.get_chat(marry)
                mname = quote_html(marred.full_name)
                # mname = "–ü—ë—Å"
                profile_info += f"\n‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {prcnt}%"
                profile_info += f"\n‚Ä¢ –í—ã –≤ –±—Ä–∞–∫–µ —Å {mname} ‚ù§Ô∏è \n‚Ä¢ –í—Ä–µ–º—è –±—Ä–∞–∫–∞: {marry_time} \n‚Ä¢ –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω —á–∞—Ç–∞: <code>{chat}</code>"
                await message.reply(f"{profile_info}")
        else:
            if marry == 0:
                profile_info += f"\n‚Ä¢ –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω —á–∞—Ç–∞: <code>{chat}</code>"
                await message.reply(f"{profile_info}")
            else:
                marred = await bot.get_chat(marry)
                mname = quote_html(marred.full_name)
                # mname = "–ü—ë—Å"
                profile_info += f"\n‚Ä¢ –í—ã –≤ –±—Ä–∞–∫–µ —Å {mname} ‚ù§Ô∏è \n‚Ä¢ –í—Ä–µ–º—è –±—Ä–∞–∫–∞: {marry_time} \n‚Ä¢ –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω —á–∞—Ç–∞: <code>{chat}</code>"
                await message.reply(f"{profile_info}")


#keys
@dp.message_handler(regexp=r"(^–ö–æ–Ω—Ñ–µ—Ç—ã|–∫–æ–Ω—Ñ–µ—Ç—ã) ?(\d+)?")
async def buy_keys(message: types.Message):
    command_parse = re.compile(r"(^–ö–æ–Ω—Ñ–µ—Ç—ã|–∫–æ–Ω—Ñ–µ—Ç—ã) ?(\d+)?")
    parsed = command_parse.match(message.text)
    suma = parsed.group(2)
    summ = 1500000 * int(suma)
    msg = message
    id = msg['from']['id']
    data = {}
    data["summ"] = summ
    data['user_id'] = message.from_user.id
    data1 = {}
    data1["suma"] = suma
    data1['user_id'] = message.from_user.id
    name = message.from_user.get_mention(as_html=True)
    balance = users.cursor.execute("SELECT balance from users where id = ?",
                                   (message.from_user.id, )).fetchone()
    balance = (balance[0])
    candy = users.cursor.execute("SELECT candy from users where id = ?",
                                 (message.from_user.id, )).fetchone()
    candy = (candy[0])
    if int(balance) >= summ:
        users.cursor.execute(
            """UPDATE users SET balance = balance - :summ WHERE id = :user_id;""",
            data)
        users.cursor.execute(
            """UPDATE users SET candy = candy + :suma WHERE id = :user_id;""",
            data1)
        users.connect.commit()
        await message.reply(
            f'–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ {suma} üç¨\n–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: <code>{summ}</code> üí∞')
        await bot.send_message(
            -5695410762,
            f'<code>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name}, ID: {id}\n–ü—Ä–∏–æ–±—Ä—ë–ª: {suma} üç¨\n–ù–∞ —Å—É–º–º—É: {summ} üí∞</code>'
        )
    else:
        await message.reply(
            f'–î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω—É–∂–Ω–æ <code>{summ}</code> üí∞, –∞ —É –≤–∞—Å <code>{balance}</code> üí∞'
        )


@dp.message_handler(commands=['use', '—É–≤–µ–ª–∏—á–∏—Ç—å', '—É–≤–µ–ª–∏—á–∏—Ç–µ–ª—å'],
                    commands_prefix='!./')
async def use(message):
    msg = message
    id = msg['from']['id']
    name = message.from_user.get_mention(as_html=True)
    led = users.cursor.execute("SELECT led from users where id = ?",
                               (message.from_user.id, )).fetchone()
    led = (led[0])
    candy = users.cursor.execute("SELECT candy from users where id = ?",
                                 (message.from_user.id, )).fetchone()
    candy = (candy[0])
    if int(candy) >= 1:
        users.cursor.execute(
            f'UPDATE users SET candy = {candy - 1}  WHERE id=?',
            (message.from_user.id, ))
        users.cursor.execute(f'UPDATE users SET led = {led + 20} WHERE id=?',
                             (message.from_user.id, ))
        users.connect.commit()
        await message.answer(
            f'{name}, –≤—ã —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∫–æ–Ω—Ñ–µ—Ç—É-—É–≤–µ–ª–∏—á–∏—Ç–µ–ª—å, –≤–∞—à –ª–µ–¥–µ–Ω–µ—Ü –≤—ã—Ä–æ—Å –Ω–∞ 20 —Å–º.\n—Ç–µ–ø–µ—Ä—å –µ–≥–æ –¥–ª–∏–Ω–∞ - {led + 20} —Å–º.\n–ö–æ–Ω—Ñ–µ—Ç-—É–≤–µ–ª–∏—á–∏—Ç–µ–ª–µ–π - {candy - 1} üç¨'
        )
    else:
        await message.reply(f'–£ —Ç–µ–±—è –Ω–µ—Ç –∫–æ–Ω—Ñ–µ—Ç—ã-—É–≤–µ–ª–∏—á–∏—Ç–µ–ª—è!')


#–û—Ç–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å
@dp.message_handler(lambda message: message.text.lower().startswith(
    ('–æ—Ç–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å ', '–û—Ç–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å ')))
async def open_box(message: types.Message):
    bugg = message.text.lower().split()[2]
    try:
        if int(bugg) >= 1 and int(bugg) <= 3:
            boxes = users.cursor.execute(
                f"SELECT boxes{str(bugg)} from users where id = ?",
                (message.from_user.id, )).fetchone()
            boxes = (boxes[0])
            keys = users.cursor.execute("SELECT keys from users where id = ?",
                                        (message.from_user.id, )).fetchone()
            keys = (keys[0])
            if int(boxes) >= 1:
                if int(keys) >= 1:
                    btn = types.InlineKeyboardButton(
                        '–û—Ç–∫—Ä—ã—Ç—å! ‚úÖ', callback_data=f'open_box_{bugg}')
                    kb = types.InlineKeyboardMarkup().add(btn)
                    await message.reply("–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å.",
                                        reply_markup=kb)
                else:
                    await message.reply(
                        f'–£ –≤–∞—Å –Ω–µ—Ç –∫–ª—é—á–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è ‚õî')
            else:
                await message.reply(f'–£ –≤–∞—Å –Ω–µ—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è ‚õî')
    except:
        pass


@dp.callback_query_handler(lambda c: c.data.startswith('open_box_'))
async def open_box_query(c: types.CallbackQuery):
    id = c.data.split('_')[2]
    boxes = users.cursor.execute(
        f"SELECT boxes{id} from users where id = ?",
        (c.message.reply_to_message.from_user.id, )).fetchone()
    boxes = (boxes[0])
    if int(boxes) >= 1:
        print(boxes)
        await bot.answer_callback_query(c.id)
        if int(id) == 1:
            money = randint(10000, 25000)
            candyes = randint(1, 2)
            keyes = randint(1, 3)
        elif int(id) == 2:
            money = randint(50000, 100000)
            candyes = randint(4, 6)
            keyes = randint(3, 5)
        elif int(id) == 3:
            money = randint(150000, 200000)
            candyes = randint(10, 13)
            keyes = randint(5, 8)

        win = ['money', 'candy', 'keys']
        w = random.choice(win)

        if str(w) == 'money':
            await c.message.answer(
                f'–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã–ª–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—å <code>¬´{id}¬ª</code> –∏ –ø–æ–ª—É—á–∏–ª–∏ <code>{money}</code> üí∞',
                parse_mode="html")
            users.cursor.execute(
                f'UPDATE users SET balance = balance + {money} WHERE id=?',
                (c.message.reply_to_message.from_user.id, ))
        elif str(w) == 'candy':
            await c.message.answer(
                f'–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã–ª–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—å <code>¬´{id}¬ª</code> –∏ –ø–æ–ª—É—á–∏–ª–∏ <code>{candyes}</code> üç¨',
                parse_mode="html")
            users.cursor.execute(
                f'UPDATE users SET candy = candy + {candyes} WHERE id=?',
                (c.message.reply_to_message.from_user.id, ))
        elif str(w) == 'keys':
            await c.message.answer(
                f'–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã–ª–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—å <code>¬´{id}¬ª</code> –∏ –ø–æ–ª—É—á–∏–ª–∏ <code>{keyes}</code> üîë',
                parse_mode="html")
            users.cursor.execute(
                f'UPDATE users SET keys = keys + {keyes} WHERE id=?',
                (c.message.reply_to_message.from_user.id, ))

        users.cursor.execute(f"UPDATE users SET keys = keys - 1 WHERE id = ?",
                             (c.message.reply_to_message.from_user.id, ))
        users.cursor.execute(
            f'UPDATE users SET boxes{id} = boxes{id} - 1 WHERE id=?',
            (c.message.reply_to_message.from_user.id, ))
        users.connect.commit()

        await bot.delete_message(c.message.chat.id, c.message.message_id)
    else:
        await c.message.reply(f'–£ –≤–∞—Å –Ω–µ—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è ‚õî')


#–ë–∏–æ
@dp.message_handler(commands=['bio'])
async def setbio(message: types.Message):
    args = message.get_args()
    name1 = message.from_user.get_mention(as_html=True)
    users.cursor.execute("SELECT bio FROM users WHERE id=?",
                         (message.from_user.id, ))
    data = users.cursor.fetchone()
    vip = users.cursor.execute("SELECT vip from users where id = ?",
                               (message.from_user.id, )).fetchone()
    vip = (vip[0])
    if str(vip) == '–ê–∫—Ç–∏–≤–µ–Ω':
        if len(args) <= 100:
            if args:
                if data is None:
                    return await message.reply("–ù–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
                users.cursor.execute(f'UPDATE users SET bio=? WHERE id=?', (
                    args,
                    message.from_user.id,
                ))
                users.connect.commit()
                await message.reply(f"–û–ø–∏—Å–∞–Ω–∏–µ {name1}, –∏–∑–º–µ–Ω–µ–Ω–æ!")
            else:
                await message.reply('–í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!')
        else:
            await message.reply(
                '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –±–∏–æ –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤!')
    else:
        await message.reply(
            f'–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å VIP —Å—Ç–∞—Ç—É—Å–æ–º üíé')


#–ü—Ä–∞–≤–∏–ª–∞
@dp.message_handler(lambda message: message.text.lower() == '–±–∏–æ')
async def bio_text(message: types.Message):
    bio = users.cursor.execute("SELECT bio from users where id = ?",
                               (message.from_user.id, )).fetchone()
    bio = (bio[0])
    await message.reply(f'‚úÖüìÉ –í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è:\n{bio}')


#–°–≤–æ—è —Ä–ø
@dp.message_handler(commands=['rp'])
async def custom_rp(message: types.Message):
    args = message.get_args()
    reply = message.reply_to_message
    vip = users.cursor.execute("SELECT vip from users where id = ?",
                               (message.from_user.id, )).fetchone()
    vip = (vip[0])
    if str(vip) == '–ê–∫—Ç–∏–≤–µ–Ω':
        if reply:
            name1 = message.from_user.get_mention(as_html=True)
            name2 = message.reply_to_message.from_user.get_mention(
                as_html=True)
            await message.answer(f'{name1}\n{args}\n{name2}')
        else:
            name1 = message.from_user.get_mention(as_html=True)
            await message.answer(f'{name1} {args}')
    else:
        await message.reply(
            f'–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å VIP —Å—Ç–∞—Ç—É—Å–æ–º üíé')


#–ù–∏–∫
@dp.message_handler(commands=['name'])
async def setname(message: types.Message):
    args = message.get_args()
    name1 = message.from_user.get_mention(as_html=True)
    users.cursor.execute("SELECT name FROM users WHERE id=?",
                         (message.from_user.id, ))
    data = users.cursor.fetchone()
    if len(args) <= 10:
        if args:
            if data is None:
                return await message.reply("–ù–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
            users.cursor.execute(f'UPDATE users SET name=? WHERE id=?', (
                args,
                message.from_user.id,
            ))
            users.connect.commit()
            await message.reply(f"–ù–∏–∫ {name1}, –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ¬´{args}¬ª")
        else:
            await message.reply('–ù–∏–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!')
    else:
        await message.reply(
            '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –Ω–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å 10 —Å–∏–º–≤–æ–ª–æ–≤!')


#–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ
@dp.message_handler(
    commands=['–ø—Ä–∏–≤—è–∑–∞—Ç—å', 'bind', '—á–∞—Ç', 'chat', '–≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ'],
    commands_prefix='+!./')
async def bind(message: types.Message):
    chat = users.cursor.execute("SELECT chat from users where id = ?",
                                (message.from_user.id, )).fetchone()
    chat = (chat[0])
    chatname = message.chat.title
    await message.reply(f'–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω ‚úÖ')
    users.cursor.execute(f'UPDATE users SET chat=? WHERE id=?', (
        chatname,
        message.from_user.id,
    ))
    users.connect.commit()


@dp.message_handler(commands=['–æ—Ç–≤—è–∑–∞—Ç—å', 'unbind'], commands_prefix='+!./')
async def bind(message: types.Message):
    await message.reply(f'–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω ‚úÖ')
    users.cursor.execute(f'UPDATE users SET chat=? WHERE id=?', (
        '–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω!',
        message.from_user.id,
    ))
    users.connect.commit()


#–ü—Ä–∞–≤–∏–ª–∞
@dp.message_handler(lambda message: message.text.lower() == '–ø—Ä–∞–≤–∏–ª–∞')
async def rules_text(message: types.Message):
    rules = chats.cursor.execute(
        "SELECT chatrules from chats where chatid = ?",
        (message.chat.id, )).fetchone()
    rules = (rules[0])
    await message.answer(f'üóíÔ∏è –ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞ {message.chat.title}:\n{rules}')


#–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞
@dp.message_handler(commands=['rules'])
async def cmd_rules(message: types.Message):
    args = message.get_args()
    chatid = message.chat.id
    if not args:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞!")
    else:
        rules = chats.cursor.execute(
            "SELECT chatrules from chats where chatid = ?",
            (message.chat.id, )).fetchone()
        rules = (rules[0])
        chats.cursor.execute(f'UPDATE chats SET chatrules=? WHERE chatid=?', (
            args,
            message.chat.id,
        ))
        chats.connect.commit()
        await message.answer('–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω—ã! üóíÔ∏è')


#–ü—Ä–æ—Å–º–æ—Ç—Ä –æ–ø–∏—Å–∞–Ω–∏—è —á–∞—Ç–∞
@dp.message_handler(lambda message: message.text.lower() == '–æ–ø–∏—Å–∞–Ω–∏–µ —á–∞—Ç–∞')
async def chatbio_text(message: types.Message):
    bio = chats.cursor.execute("SELECT chatbio from chats where chatid = ?",
                               (message.chat.id, )).fetchone()
    bio = (bio[0])
    vip = chats.cursor.execute("SELECT vipchat from users where chatid = ?",
                               (message.chat.id, )).fetchone()
    vip = (vip[0])
    if str(vip) == '–ê–∫—Ç–∏–≤–µ–Ω':
        await message.answer(f'–û–ø–∏—Å–∞–Ω–∏–µ —á–∞—Ç–∞:\n{bio}')
    else:
        await message.reply(
            f'–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à—å —á–∞—Ç–∞–º —Å VIP —Å—Ç–∞—Ç—É—Å–æ–º üíé')


#–û–ø–∏—Å–∞–Ω–∏–µ —á–∞—Ç–∞
@dp.message_handler(commands=['chatinfo'])
async def cmd_chat_bio(message: types.Message):
    args = message.get_args()
    chatid = message.chat.id
    vip = chats.cursor.execute("SELECT vipchat from chats where chatid = ?",
                               (message.chat.id, )).fetchone()
    vip = (vip[0])
    if str(vip) == '–ê–∫—Ç–∏–≤–µ–Ω':
        if not args:
            await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ!')
        else:
            rules = chats.cursor.execute(
                "SELECT chatbio from chats where chatid = ?",
                (message.chat.id, )).fetchone()
            rules = (rules[0])
            chats.cursor.execute(f'UPDATE chats SET chatbii=? WHERE chatid=?',
                                 (
                                     args,
                                     message.chat.id,
                                 ))
            chats.connect.commit()
            await message.answer('–û–ø–∏—Å–∞–Ω–∏–µ —á–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–æ! üóíÔ∏è')
    else:
        await message.reply(
            f'–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à—å —á–∞—Ç–∞–º —Å VIP —Å—Ç–∞—Ç—É—Å–æ–º üíé')


#–ü–µ—Ä–µ–¥–∞—á–∏
@dp.message_handler(regexp=r"(^–ü–µ—Ä–µ–¥–∞—Ç—å|–ø–µ—Ä–µ–¥–∞—Ç—å) ?(\d+)?")
async def send_money(message: types.Message):
    balance = users.cursor.execute("SELECT balance from users where id = ?",
                                   (message.from_user.id, )).fetchone()
    balance = (balance[0])
    command_parse = re.compile(r"(^–ü–µ—Ä–µ–¥–∞—Ç—å|–ø–µ—Ä–µ–¥–∞—Ç—å) ?(\d+)?")
    parsed = command_parse.match(message.text)
    suma = parsed.group(2)
    name1 = message.reply_to_message.from_user.get_mention(as_html=True)
    name2 = message.from_user.get_mention(as_html=True)
    suma = int(suma)
    data = {}
    data["suma"] = suma
    data['user_id'] = message.reply_to_message.from_user.id
    data1 = {}
    data1["suma"] = suma
    data1['user_id'] = message.from_user.id
    if int(balance) >= suma:
        users.cursor.execute(
            """UPDATE users SET balance = balance + :suma WHERE id = :user_id;""",
            data)
        users.cursor.execute(
            """UPDATE users SET balance = balance - :suma WHERE id = :user_id;""",
            data1)
        await message.reply(
            f"{name2} –æ—Ç–¥–∞–ª(–∞) {name1} - <code>{suma}</code> üí∞",
            parse_mode='html')
    else:
        await message.reply(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏!",
                            parse_mode='html')
        users.connect.commit()


#–í–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏
class Quest(StatesGroup):
    msg = State()


@dp.message_handler(commands=['–æ–±—Ä–∞—â–µ–Ω–∏–µ', 'q', '–≤–æ–ø—Ä–æ—Å'],
                    commands_prefix='!/')
async def question(message: types.Message):
    id = message.from_user.id
    await message.answer(
        'üñã –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –±–æ—Ç–∞ :)')
    await Quest.msg.set()


@dp.message_handler(content_types=ContentType.ANY, state=Quest.msg)
async def quest_msgl(message: types.Message, state: FSMContext):
    await state.finish()
    i = '-1001392898291'
    name = message.from_user.get_mention(as_html=True)
    bot_msg = await message.answer(f'–û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è...')
    await bot.send_message(
        -1001392898291,
        f'–ü–æ–ª—É—á–µ–Ω–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ!\n\n–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {name}\nID: {message.from_user.id}\n–Æ–∑–µ—Ä–Ω–µ–π–º: @{message.from_user.username}\n\n–û–±—Ä–∞—â–µ–Ω–∏–µ:'
    )
    await message.copy_to(i)
    await bot_msg.edit_text(f'üì£ –û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')


@dp.message_handler(lambda msg: msg.text.lower() == '–±–æ—Ç –ª–∏–≤–Ω–∏')
async def bot_leave(message):
    stts = users.cursor.execute("SELECT status from users where id = ?",
                                (message.from_user.id, )).fetchone()
    status = (stts[0])
    if str(status) == '–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞':
        await message.answer("3")
        await sleep(1)
        await message.answer("2")
        await sleep(1)
        await message.answer("1")
        await sleep(1)
        await message.answer("Goodbye my friends")
        await message.chat.leave()
    elif str(status) == '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä':
        await message.answer("3")
        await sleep(1)
        await message.answer("2")
        await sleep(1)
        await message.answer("1")
        await sleep(1)
        await message.answer("Goodbye my friends")
        await message.chat.leave()
    else:
        await message.reply('–°–∞–º –ª–∏–≤–Ω–∏, —à–∞–∫–∞–ª')


#–ò–≥—Ä—ã
@dp.message_handler(regexp=r"(^–ö–∞–∑–∏–Ω–æ|–∫–∞–∑–∏–Ω–æ) ?(\d+)?")
async def kazino(message: types.Message):
    msg = message
    stts = users.cursor.execute("SELECT status from users where id = ?",
                                (message.from_user.id, )).fetchone()
    status = (stts[0])
    name = message.from_user.get_mention(as_html=True)
    command_parse = re.compile(r"(^–ö–∞–∑–∏–Ω–æ|–∫–∞–∑–∏–Ω–æ) ?(\d+)?")
    parsed = command_parse.match(message.text)
    summ = parsed.group(2)
    summ2 = int(summ)
    data = {}
    data["suma"] = int(summ)
    data['user_id'] = message.from_user.id
    data1 = {}
    data1["suma"] = (summ2)
    data1['user_id'] = message.from_user.id
    chance = randint(0, 100)
    balance = users.cursor.execute("SELECT balance from users where id = ?",
                                   (message.from_user.id, )).fetchone()
    balance = (balance[0])
    if str(status) == '–°–ø–æ–Ω—Å–æ—Ä –±–æ—Ç–∞':
        if int(summ) <= 10000000000:
            if int(balance) >= int(summ):
                if int(chance) <= 49:
                    await message.answer(
                        f'{name}, —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–ª(–∞) <code>{summ}</code>üí∞',
                        parse_mode='html')
                    users.cursor.execute(
                        """UPDATE users SET balance = balance - :suma WHERE id = :user_id;""",
                        data)
                    users.cursor.execute(
                        f'UPDATE users SET loses = loses + 1 WHERE id=?',
                        (message.from_user.id, ))
                    users.cursor.execute(
                        f'UPDATE users SET games = games + 1 WHERE id=?',
                        (message.from_user.id, ))
                elif int(chance) >= 50:
                    await message.answer(
                        f'{name}, —Ç—ã –≤—ã–∏–≥—Ä–∞–ª(–∞) <code>{summ2}</code>üí∞',
                        parse_mode='html')
                    users.cursor.execute(
                        """UPDATE users SET balance = balance + :suma WHERE id = :user_id;""",
                        data1)
                    users.cursor.execute(
                        f'UPDATE users SET games = games + 1 WHERE id=?',
                        (message.from_user.id, ))
                    users.cursor.execute(
                        f'UPDATE users SET wins = wins + 1 WHERE id=?',
                        (message.from_user.id, ))
                    users.connect.commit()
            elif int(balance) < int(summ):
                await message.reply(
                    f'–£ —Ç–µ–±—è –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç, —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å: <code>{balance}</code>üí∞ ',
                    parse_mode='html')
        else:
            await message.reply(
                f'–ù–µ–ª—å–∑—è –∏–≥—Ä–∞—Ç—å –Ω–∞ —Å—É–º–º—ã –±–æ–ª–µ–µ <code>10000000000</code>üí∞',
                parse_mode='html')
    else:
        if int(summ) <= 1000000000:
            if int(balance) >= int(summ):
                if int(chance) <= 49:
                    await message.answer(
                        f'{name}, —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–ª(–∞) <code>{summ}</code>üí∞',
                        parse_mode='html')
                    users.cursor.execute(
                        """UPDATE users SET balance = balance - :suma WHERE id = :user_id;""",
                        data)
                    users.cursor.execute(
                        f'UPDATE users SET loses = loses + 1 WHERE id=?',
                        (message.from_user.id, ))
                    users.cursor.execute(
                        f'UPDATE users SET games = games + 1 WHERE id=?',
                        (message.from_user.id, ))
                elif int(chance) >= 50:
                    await message.answer(
                        f'{name}, —Ç—ã –≤—ã–∏–≥—Ä–∞–ª(–∞) <code>{summ2}</code>üí∞',
                        parse_mode='html')
                    users.cursor.execute(
                        """UPDATE users SET balance = balance + :suma WHERE id = :user_id;""",
                        data1)
                    users.cursor.execute(
                        f'UPDATE users SET wins = wins + 1 WHERE id=?',
                        (message.from_user.id, ))
                    users.cursor.execute(
                        f'UPDATE users SET games = games + 1 WHERE id=?',
                        (message.from_user.id, ))
                    users.connect.commit()
            elif int(balance) < int(summ):
                await message.reply(
                    f'–£ —Ç–µ–±—è –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç, —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å: <code>{balance}</code>üí∞ ',
                    parse_mode='html')
        else:
            await message.reply(
                f'–ù–µ–ª—å–∑—è –∏–≥—Ä–∞—Ç—å –Ω–∞ —Å—É–º–º—ã –±–æ–ª–µ–µ <code>1000000000</code>üí∞',
                parse_mode='html')


@dp.message_handler(regexp=r"(^–ö—É–±|–∫—É–±) ?(\d+)? ?(\d+)?")
async def kub(message: types.Message):
    command_parse = re.compile(r"(^–ö—É–±|–∫—É–±) ?(\d+)? ?(\d+)?")
    parsed = command_parse.match(message.text)
    dice_value = parsed.group(2)
    dice_value = int(dice_value)
    summ = parsed.group(3)
    summ = (summ)
    name1 = message.from_user.get_mention(as_html=True)
    if int(summ) <= int(1000000000):
        if dice_value > 6:
            await message.reply(
                f"–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n<b>–ö—É–± (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6) (—Å—Ç–∞–≤–∫–∞)</b>",
                parse_mode='html')
        else:
            if not summ:
                await message.reply(
                    f"–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n<b>–ö—É–± (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6) (—Å—Ç–∞–≤–∫–∞)</b>",
                    parse_mode='html')
            else:
                if not dice_value:
                    await message.reply(
                        f"–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<b>–ö—É–± (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6) (—Å—Ç–∞–≤–∫–∞)</b>",
                        parse_mode='html')
                else:
                    balanc = users.cursor.execute(
                        "SELECT balance from users where id = ?",
                        (message.from_user.id, )).fetchone()
                    balance = (balanc[0])
                    summ = int(summ)
                    if balance >= summ:
                        dice_value = int(dice_value)
                        bot_data = await bot.send_dice(message.chat.id)
                        bot_data = bot_data['dice']['value']
                        plus = bot_data + 1
                        minus = bot_data - 1
                        summ2 = summ * 10
                        data = {}
                        data["suma"] = summ
                        data['user_id'] = message.from_user.id
                        data1 = {}
                        data1["suma"] = summ2
                        data1['user_id'] = message.from_user.id
                        await sleep(5)

                        if bot_data > dice_value:
                            await message.reply(
                                f'–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª(–∞) <b>{summ}</b>üí∞',
                                parse_mode='html')
                            users.cursor.execute(
                                """UPDATE users SET balance = balance - :suma WHERE id = :user_id;""",
                                data)
                            users.cursor.execute(
                                f'UPDATE users SET games = games + 1 WHERE id=?',
                                (message.from_user.id, ))
                            users.cursor.execute(
                                f'UPDATE users SET loses = loses + 1 WHERE id=?',
                                (message.from_user.id, ))

                        elif bot_data < dice_value:
                            await message.reply(
                                f'–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª(–∞) <b>{summ}</b>üí∞',
                                parse_mode='html')
                            users.cursor.execute(
                                """UPDATE users SET balance = balance - :suma WHERE id = :user_id;""",
                                data)
                            users.cursor.execute(
                                f'UPDATE users SET games = games + 1 WHERE id=?',
                                (message.from_user.id, ))
                            users.cursor.execute(
                                f'UPDATE users SET loses = loses + 1 WHERE id=?',
                                (message.from_user.id, ))
                        else:
                            await message.reply(
                                f'–¢—ã –≤—ã–∏–≥—Ä–∞–ª(–∞) <b>{summ2}</b>üí∞',
                                parse_mode='html')
                            users.cursor.execute(
                                """UPDATE users SET balance = balance + :suma WHERE id = :user_id;""",
                                data1)
                            users.cursor.execute(
                                f'UPDATE users SET games = games + 1 WHERE id=?',
                                (message.from_user.id, ))
                            users.cursor.execute(
                                f'UPDATE users SET wins = wins + 1 WHERE id=?',
                                (message.from_user.id, ))
                            users.connect.commit()
                    elif balance < summ:
                        balanc = users.cursor.execute(
                            "SELECT balance from users where id = ?",
                            (message.from_user.id, )).fetchone()
                        balance = (balanc[0])
                        await message.reply(
                            f'–£ —Ç–µ–±—è –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç, —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å: <code>{balance}</code>üí∞ ',
                            parse_mode='html')
    else:
        await message.reply(
            f'–ù–µ–ª—å–∑—è –∏–≥—Ä–∞—Ç—å –Ω–∞ —Å—É–º—ã –±–æ–ª–µ–µ <code>1000000000</code>üí∞',
            parse_mode='html')


@dp.message_handler(regexp=r"(–∫–∞–º–µ–Ω—å|–ö–∞–º–µ–Ω—å) ?(\d+)?")
async def kamen(message: types.Message):
    command_parse = re.compile(r"(–∫–∞–º–µ–Ω—å|–ö–∞–º–µ–Ω—å) ?(\d+)?")
    parsed = command_parse.match(message.text)
    summ = parsed.group(2)
    summ = int(summ)
    name1 = message.from_user.get_mention(as_html=True)
    data = {}
    data["suma"] = int(summ)
    data['user_id'] = message.from_user.id
    balanc = users.cursor.execute("SELECT balance from users where id = ?",
                                  (message.from_user.id, )).fetchone()
    balance = (balanc[0])
    if balance >= summ:
        rand = random.choice(["üóø–ö–∞–º–µ–Ω—å", "‚úÇÔ∏è–ù–æ–∂–Ω–∏—Ü—ã", "üìÑ–ë—É–º–∞–≥—É"])
        await message.answer("–Ø –≤—ã–±—Ä–∞–ª " + rand + "\n–ê —Ç—ã –≤—ã–±—Ä–∞–ª üóø–ö–∞–º–µ–Ω—å")
        if rand == 'üóø–ö–∞–º–µ–Ω—å':
            await message.answer("–ù–∏—á—å—è‚öîÔ∏è")
        elif rand == '‚úÇÔ∏è–ù–æ–∂–Ω–∏—Ü—ã':
            await message.answer(f"–¢—ã –≤—ã–∏–≥—Ä–∞–ª {summ}üí∞")
            users.cursor.execute(
                """UPDATE users SET balance = balance + :suma WHERE id = :user_id;""",
                data)
            users.cursor.execute(
                f'UPDATE users SET games = games + 1 WHERE id=?',
                (message.from_user.id, ))
            users.cursor.execute(
                f'UPDATE users SET wins = wins + 1 WHERE id=?',
                (message.from_user.id, ))
            users.connect.commit()
        else:
            await message.answer(f"–Ø –ø–æ–±–µ–¥–∏–ª\n–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª {summ}üí∞")
            users.cursor.execute(
                """UPDATE users SET balance = balance - :suma WHERE id = :user_id;""",
                data)
            users.cursor.execute(
                f'UPDATE users SET games = games + 1 WHERE id=?',
                (message.from_user.id, ))
            users.cursor.execute(
                f'UPDATE users SET loses = loses + 1 WHERE id=?',
                (message.from_user.id, ))
            users.connect.commit()
    elif balance < summ:
        await message.answer(
            f'{name1} —É —Ç–µ–±—è –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ üí∞\n–¢–≤–æ–π –±–∞–ª–∞–Ω—Å:<code>{balance}</code>üí∞ ',
            parse_mode='html')
        users.connect.commit()


@dp.message_handler(regexp=r"(–Ω–æ–∂–Ω–∏—Ü—ã|–ù–æ–∂–Ω–∏—Ü—ã) ?(\d+)?")
async def nozhnicy(message: types.Message):
    command_parse = re.compile(r"(–Ω–æ–∂–Ω–∏—Ü—ã|–ù–æ–∂–Ω–∏—Ü—ã) ?(\d+)?")
    parsed = command_parse.match(message.text)
    summ = parsed.group(2)
    summ = int(summ)
    name1 = message.from_user.get_mention(as_html=True)
    data = {}
    data["suma"] = int(summ)
    data['user_id'] = message.from_user.id
    balanc = users.cursor.execute("SELECT balance from users where id = ?",
                                  (message.from_user.id, )).fetchone()
    balance = (balanc[0])
    if balance >= summ:
        rand = random.choice(["üóø–ö–∞–º–µ–Ω—å", "‚úÇÔ∏è–ù–æ–∂–Ω–∏—Ü—ã", "üìÑ–ë—É–º–∞–≥—É"])
        await message.answer("–Ø –≤—ã–±—Ä–∞–ª " + rand + "\n–ê —Ç—ã –≤—ã–±—Ä–∞–ª ‚úÇÔ∏è–ù–æ–∂–Ω–∏—Ü—ã")
        if rand == 'üóø–ö–∞–º–µ–Ω—å':
            await message.answer(f"–Ø –ø–æ–±–µ–¥–∏–ª\n–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª {summ}üí∞")
            users.cursor.execute(
                """UPDATE users SET balance = balance - :suma WHERE id = :user_id;""",
                data)
            users.cursor.execute(
                f'UPDATE users SET games = games + 1 WHERE id=?',
                (message.from_user.id, ))
            users.cursor.execute(
                f'UPDATE users SET loses = loses + 1 WHERE id=?',
                (message.from_user.id, ))
            users.connect.commit()
        elif rand == '‚úÇÔ∏è–ù–æ–∂–Ω–∏—Ü—ã':
            await message.answer("–ù–∏—á—å—è‚öîÔ∏è")
        else:
            await message.answer(f"–¢—ã –≤—ã–∏–≥—Ä–∞–ª {summ}üí∞")
            users.cursor.execute(
                """UPDATE users SET balance = balance + :suma WHERE id = :user_id;""",
                data)
            users.cursor.execute(
                f'UPDATE users SET games = games + 1 WHERE id=?',
                (message.from_user.id, ))
            users.cursor.execute(
                f'UPDATE users SET wins = wins + 1 WHERE id=?',
                (message.from_user.id, ))
            users.connect.commit()
    elif balance < summ:
        await message.answer(
            f'{name1} —É —Ç–µ–±—è –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ üí∞\n–¢–≤–æ–π –±–∞–ª–∞–Ω—Å:<code>{balance}</code>üí∞ ',
            parse_mode='html')
        users.connect.commit()


@dp.message_handler(regexp=r"(–±—É–º–∞–≥–∞|–ë—É–º–∞–≥–∞) ?(\d+)?")
async def bumaga(message: types.Message):
    command_parse = re.compile(r"(–±—É–º–∞–≥–∞|–ë—É–º–∞–≥–∞) ?(\d+)?")
    parsed = command_parse.match(message.text)
    summ = parsed.group(2)
    summ = int(summ)
    name1 = message.from_user.get_mention(as_html=True)
    data = {}
    data["suma"] = int(summ)
    data['user_id'] = message.from_user.id
    balanc = users.cursor.execute("SELECT balance from users where id = ?",
                                  (message.from_user.id, )).fetchone()
    balance = (balanc[0])
    if balance >= summ:
        rand = random.choice(["üóø–ö–∞–º–µ–Ω—å", "‚úÇÔ∏è–ù–æ–∂–Ω–∏—Ü—ã", "üìÑ–ë—É–º–∞–≥—É"])
        await message.answer("–Ø –≤—ã–±—Ä–∞–ª " + rand + "\n–ê —Ç—ã –≤—ã–±—Ä–∞–ª üìÑ–ë—É–º–∞–≥—É")
        if rand == 'üóø–ö–∞–º–µ–Ω—å':
            await message.answer(f"–¢—ã –≤—ã–∏–≥—Ä–∞–ª {summ}üí∞")
            users.cursor.execute(
                """UPDATE users SET balance = balance + :suma WHERE id = :user_id;""",
                data)
            users.cursor.execute(
                f'UPDATE users SET games = games + 1 WHERE id=?',
                (message.from_user.id, ))
            users.cursor.execute(
                f'UPDATE users SET wins = wins + 1 WHERE id=?',
                (message.from_user.id, ))
            users.connect.commit()
        elif rand == '‚úÇÔ∏è–ù–æ–∂–Ω–∏—Ü—ã':
            await message.answer(f"–Ø –ø–æ–±–µ–¥–∏–ª\n–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª {summ}üí∞")
            users.cursor.execute(
                """UPDATE users SET balance = balance - :suma WHERE id = :user_id;""",
                data)
            users.cursor.execute(
                f'UPDATE users SET games = games + 1 WHERE id=?',
                (message.from_user.id, ))
            users.cursor.execute(
                f'UPDATE users SET loses = loses + 1 WHERE id=?',
                (message.from_user.id, ))
            users.connect.commit()
        else:
            await message.answer("–ù–∏—á—å—è‚öîÔ∏è")
    elif balance < summ:
        await message.answer(
            f'{name1} —É —Ç–µ–±—è –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ üí∞\n–¢–≤–æ–π –±–∞–ª–∞–Ω—Å:<code>{balance}</code>üí∞ ',
            parse_mode='html')
        users.connect.commit()


@dp.message_handler(regexp=r"(^–î–∞—Ä—Ç—Å|–¥–∞—Ä—Ç—Å) ?(\d+)?")
async def darts(message: types.Message):
    command_parse = re.compile(r"(^–î–∞—Ä—Ç—Å|–¥–∞—Ä—Ç—Å) ?(\d+)?")
    parsed = command_parse.match(message.text)
    summ = parsed.group(2)
    name1 = message.from_user.get_mention(as_html=True)
    data = {}
    data["suma"] = summ
    data['user_id'] = message.from_user.id
    balanc = users.cursor.execute("SELECT balance from users where id = ?",
                                  (message.from_user.id, )).fetchone()
    balance = (balanc[0])
    summ = int(summ)
    if balance >= summ:
        bot_data = await bot.send_dice(message.chat.id, emoji='üéØ')
        bot_data = bot_data['dice']['value']
        await sleep(3)
        if bot_data == 6:
            await message.answer(
                f'{name1} —Ç—ã –ø–æ–ø–∞–ª(–∞) –ø—Ä—è–º–æ –≤ —Ü–µ–ª—å, –∏ –≤—ã–∏–≥—Ä–∞–ª(–∞) - {summ}üí∞',
                parse_mode='html')
            users.cursor.execute(
                """UPDATE users SET balance = balance + :suma WHERE id = :user_id;""",
                data)
            users.cursor.execute(
                f'UPDATE users SET games = games + 1 WHERE id=?',
                (message.from_user.id, ))
            users.cursor.execute(
                f'UPDATE users SET games = wins + 1 WHERE id=?',
                (message.from_user.id, ))
            users.connect.commit()
        elif bot_data == 1:
            await message.answer(
                f'{name1} —Ç—ã –ø—Ä–æ–º–∞–∑–∞–ª(–∞) –∏ –ø—Ä–æ–∏–≥—Ä–∞–ª(–∞) - {summ}üí∞',
                parse_mode='html')
            users.cursor.execute(
                """UPDATE users SET balance = balance - :suma WHERE id = :user_id;""",
                data)
            users.cursor.execute(
                f'UPDATE users SET games = games + 1 WHERE id=?',
                (message.from_user.id, ))
            users.cursor.execute(
                f'UPDATE users SET loses = loses + 1 WHERE id=?',
                (message.from_user.id, ))
            users.connect.commit()
        else:
            await message.reply(f'–¢–∞–∫–æ–π —Å–µ–±–µ –±—Ä–æ—Å–æ–∫, –¥–µ–Ω—å–≥–∏ –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–∏ —Ç–µ–±–µ')
            users.cursor.execute(
                f'UPDATE users SET games = games + 1 WHERE id=?',
                (message.from_user.id, ))
            users.connect.commit()
    elif balance < summ:
        await message.answer(
            f'{name1} —É —Ç–µ–±—è –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ üí∞\n–¢–≤–æ–π –±–∞–ª–∞–Ω—Å:<code>{balance}</code>üí∞ ',
            parse_mode='html')
        users.connect.commit()


@dp.message_handler(regexp=r"(^–ë–æ—É–ª|–±–æ—É–ª) ?(\d+)?")
async def boul(message: types.Message):
    command_parse = re.compile(r"(^–ë–æ—É–ª|–±–æ—É–ª) ?(\d+)?")
    parsed = command_parse.match(message.text)
    summ = parsed.group(2)
    name1 = message.from_user.get_mention(as_html=True)
    data = {}
    data["suma"] = summ
    data['user_id'] = message.from_user.id
    balanc = users.cursor.execute("SELECT balance from users where id = ?",
                                  (message.from_user.id, )).fetchone()
    balance = (balanc[0])
    summ = int(summ)
    if balance >= summ:
        bot_data = await bot.send_dice(message.chat.id, emoji='üé≥')
        bot_data = bot_data['dice']['value']
        await sleep(3)
        if bot_data == 6:
            await message.answer(
                f'{name1} —Ç—ã —Å–±–∏–ª(–∞) –≤—Å–µ –∫–µ–≥–ª–∏ –∏ –≤—ã–∏–≥—Ä–∞–ª(–∞) - {summ}üí∞',
                parse_mode='html')
            users.cursor.execute(
                """UPDATE users SET balance = balance + :suma WHERE id = :user_id;""",
                data)
            users.cursor.execute(
                f'UPDATE users SET games = games + 1 WHERE id=?',
                (message.from_user.id, ))
            users.cursor.execute(
                f'UPDATE users SET wins = wins + 1 WHERE id=?',
                (message.from_user.id, ))
            users.connect.commit()
        elif bot_data == 1:
            await message.answer(
                f'{name1} —Ç—ã –ø—Ä–æ–º–∞–∑–∞–ª(–∞) –∏ –ø—Ä–æ–∏–≥—Ä–∞–ª(–∞) - {summ}üí∞',
                parse_mode='html')
            users.cursor.execute(
                """UPDATE users SET balance = balance - :suma WHERE id = :user_id;""",
                data)
            users.cursor.execute(
                f'UPDATE users SET games = games + 1 WHERE id=?',
                (message.from_user.id, ))
            users.cursor.execute(
                f'UPDATE users SET loses = loses + 1 WHERE id=?',
                (message.from_user.id, ))
            users.connect.commit()
        else:
            await message.anwer(
                f'{name1} —Ç–∞–∫–æ–π —Å–µ–±–µ –±—Ä–æ—Å–æ–∫, –¥–µ–Ω—å–≥–∏ –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–∏ —Ç–µ–±–µ')
            users.cursor.execute(
                f'UPDATE users SET games = games + 1 WHERE id=?',
                (message.from_user.id, ))
            users.connect.commit()
    elif balance < summ:
        await message.answer(
            f'{name1} —É —Ç–µ–±—è –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ üí∞\n–¢–≤–æ–π –±–∞–ª–∞–Ω—Å:<code>{balance}</code>üí∞ ',
            parse_mode='html')
        users.connect.commit()


@dp.message_handler(regexp=r"(^–§—É—Ç|—Ñ—É—Ç) ?(\d+)?")
async def process_start_command(message: types.Message):
    command_parse = re.compile(r"(^–§—É—Ç|—Ñ—É—Ç) ?(\d+)?")
    parsed = command_parse.match(message.text)
    summ = parsed.group(2)
    name1 = message.from_user.get_mention(as_html=True)
    data = {}
    data["suma"] = summ
    data['user_id'] = message.from_user.id
    balanc = users.cursor.execute("SELECT balance from users where id = ?",
                                  (message.from_user.id, )).fetchone()
    balance = (balanc[0])
    summ = int(summ)
    if balance >= summ:
        bot_data = await bot.send_dice(message.chat.id, emoji='‚öΩ')
        bot_data = bot_data['dice']['value']
        await sleep(4)
        if bot_data >= 3:
            await message.reply(f'–¢—ã –ø–æ–ø–∞–ª(–∞) –≤ –≤–æ—Ä–æ—Ç–∞ –∏ –≤—ã–∏–≥—Ä–∞–ª(–∞) - {summ}üí∞',
                                parse_mode='html')
            users.cursor.execute(
                """UPDATE users SET balance = balance + :suma WHERE id = :user_id;""",
                data)
            users.cursor.execute(
                f'UPDATE users SET games = games + 1 WHERE id=?',
                (message.from_user.id, ))
            users.cursor.execute(
                f'UPDATE users SET wins = wins + 1 WHERE id=?',
                (message.from_user.id, ))
            users.connect.commit()
        else:
            await message.reply(f'–¢—ã –ø—Ä–æ–º–∞–∑–∞–ª(–∞) –∏ –ø—Ä–æ–∏–≥—Ä–∞–ª(–∞) - {summ}üí∞',
                                parse_mode='html')
            users.cursor.execute(
                """UPDATE users SET balance = balance - :suma WHERE id = :user_id;""",
                data)
            users.cursor.execute(
                f'UPDATE users SET games = games + 1 WHERE id=?',
                (message.from_user.id, ))
            users.cursor.execute(
                f'UPDATE users SET games = loses + 1 WHERE id=?',
                (message.from_user.id, ))
            users.connect.commit()
    elif balance < summ:
        await message.answer(
            f'{name1} —É —Ç–µ–±—è –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ üí∞\n–¢–≤–æ–π –±–∞–ª–∞–Ω—Å:<code>{balance}</code>üí∞ ',
            parse_mode='html')
        users.connect.commit()


@dp.message_handler(regexp=r"(^–ë–∞—Å|–±–∞—Å|–ë–∞—Å–∫–µ—Ç|–±–∞—Å–∫–µ—Ç) ?(\d+)?")
async def baskeet(message: types.Message):
    command_parse = re.compile(r"(^–ë–∞—Å|–±–∞—Å|–ë–∞—Å–∫–µ—Ç|–±–∞—Å–∫–µ—Ç) ?(\d+)?")
    parsed = command_parse.match(message.text)
    summ = parsed.group(2)
    name1 = message.from_user.get_mention(as_html=True)
    data = {}
    data["suma"] = summ
    data['user_id'] = message.from_user.id
    balanc = users.cursor.execute("SELECT balance from users where id = ?",
                                  (message.from_user.id, )).fetchone()
    balance = (balanc[0])
    summ = int(summ)
    if balance >= summ:
        bot_data = await bot.send_dice(message.chat.id, emoji='üèÄ')
        bot_data = bot_data['dice']['value']
        await sleep(4)
        if bot_data >= 4:
            await message.answer(
                f'{name1} —Ç—ã –ø–æ–ø–∞–ª(–∞) –≤ –∫–æ–ª—å—Ü–æ –∏ –≤—ã–∏–≥—Ä–∞–ª(–∞) - {summ}üí∞',
                parse_mode='html')
            users.cursor.execute(
                """UPDATE users SET balance = balance + :suma WHERE id = :user_id;""",
                data)
            users.cursor.execute(
                f'UPDATE users SET games = games + 1 WHERE id=?',
                (message.from_user.id, ))
            users.cursor.execute(
                f'UPDATE users SET wins = wins + 1 WHERE id=?',
                (message.from_user.id, ))
        elif bot_data == 3:
            await message.answer(f'{name1} üóøüóøüóø', parse_mode='html')
            users.cursor.execute(
                """UPDATE users SET balance = balance + :suma WHERE id = :user_id;""",
                data)
            users.cursor.execute(
                f'UPDATE users SET games = games + 1 WHERE id=?',
                (message.from_user.id, ))
            users.connect.commit()
        else:
            await message.answer(
                f'{name1} —Ç—ã –ø—Ä–æ–º–∞–∑–∞–ª(–∞) –∏ –ø—Ä–æ–∏–≥—Ä–∞–ª(–∞) - {summ}üí∞',
                parse_mode='html')
            users.cursor.execute(
                """UPDATE users SET balance = balance - :suma WHERE id = :user_id;""",
                data)
            users.cursor.execute(
                f'UPDATE users SET games = games + 1 WHERE id=?',
                (message.from_user.id, ))
            users.cursor.execute(
                f'UPDATE users SET loses = loses + 1 WHERE id=?',
                (message.from_user.id, ))
            users.connect.commit()
    elif balance < summ:
        await message.answer(
            f'{name1} —É —Ç–µ–±—è –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ üí∞\n–¢–≤–æ–π –±–∞–ª–∞–Ω—Å:<code>{balance}</code>üí∞ ',
            parse_mode='html')
        users.connect.commit()


#keys
@dp.message_handler(regexp=r"(^–ö–ª—é—á–∏|–∫–ª—é—á–∏) ?(\d+)?")
async def buy_keys(message: types.Message):
    command_parse = re.compile(r"(^–ö–ª—é—á–∏|–∫–ª—é—á–∏) ?(\d+)?")
    parsed = command_parse.match(message.text)
    suma = parsed.group(2)
    summ = 250000 * int(suma)
    msg = message
    id = msg['from']['id']
    data = {}
    data["summ"] = summ
    data['user_id'] = message.from_user.id
    data1 = {}
    data1["suma"] = suma
    data1['user_id'] = message.from_user.id
    users.cursor.execute(f"SELECT id FROM users WHERE id = '{id}'")
    name = message.from_user.get_mention(as_html=True)
    balance = users.cursor.execute("SELECT balance from users where id = ?",
                                   (message.from_user.id, )).fetchone()
    balance = (balance[0])
    keys = users.cursor.execute("SELECT keys from users where id = ?",
                                (message.from_user.id, )).fetchone()
    keys = (keys[0])
    if int(balance) >= summ:
        users.cursor.execute(
            """UPDATE users SET balance = balance - :summ WHERE id = :user_id;""",
            data)
        users.cursor.execute(
            """UPDATE users SET keys = keys + :suma WHERE id = :user_id;""",
            data1)
        users.connect.commit()
        await message.reply(
            f'–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ {suma} üîë\n–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: <code>{summ}</code> üí∞')
        await bot.send_message(
            -1001392898291,
            f'<code>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name}, ID: {id}\n–ü—Ä–∏–æ–±—Ä—ë–ª: {suma} üîë\n–ù–∞ —Å—É–º–º—É: {summ} üí∞</code>'
        )
    else:
        await message.reply(
            f'–î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω—É–∂–Ω–æ <code>{summ}</code> üí∞, –∞ —É –≤–∞—Å <code>{balance}</code> üí∞'
        )


#boxes
@dp.message_handler(lambda message: message.text.lower().startswith(
    ('–ö—É–ø–∏—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å ', '–∫—É–ø–∏—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å ')))
async def buy_boxes(message):
    balance = users.cursor.execute("SELECT balance from users where id = ?",
                                   (message.from_user.id, )).fetchone()
    balance = (balance[0])
    try:
        if len(message.text.lower().split()) == 4:
            box_number = message.text.lower().split()[2]
            count = message.text.lower().split()[2]
            box_prices = [0, 10000, 20000,
                          30000]  # 0 = 0, 10000 = 1, 1 = box_number
            if int(count) != 0 and int(count) > 0:
                if int(box_number) >= 1 and int(box_number) <= 3:
                    if int(balance) >= int(
                            box_prices[int(box_number)]) * int(count):
                        btn_accept = types.InlineKeyboardButton(
                            '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å! ‚úÖ',
                            callback_data=
                            f'buy_box_{str(box_number)}_{str(box_prices[int(box_number)])}_{str(count)}'
                        )
                        btn_cancel = types.InlineKeyboardButton(
                            "–û—Ç–º–µ–Ω–∏—Ç—å! ‚õî", callback_data="cancel")
                        kb = types.InlineKeyboardMarkup().add(
                            btn_accept, btn_cancel)
                        b_n = int(box_prices[int(box_number)]) * int(count)
                        await message.reply(
                            f"–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å <code>¬´{str(box_number)}¬ª</code> üì¶ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ <code>{str(count)}</code> –∑–∞ <code>{b_n}</code> üí∞.",
                            parse_mode="html",
                            reply_markup=kb)
                    else:
                        await message.reply("–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –±–∞–ª–∞–Ω—Å–∞ üí∞")
                else:
                    await message.reply(
                        "–ß–∏—Å–ª–æ –∫–æ—Ä–æ–±–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –ø–æ–∫—É–ø–∫–∏ = <code>3</code> üì¶üì¶üì¶",
                        parse_mode="html")
            else:
                await message.reply(
                    "–ö–æ–ª-—Å—Ç–≤–æ –∫–æ—Ä–æ–±–æ–∫ –Ω–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–≤–Ω—è—Ç—Å—è <code>0</code>üì¶",
                    parse_mode="html")
    except Exception as e:
        await message.reply("""–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É
–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å: <code>–∫—É–ø–∏—Ç—å –∫–æ—Ä–æ–±–∫—É ¬´1-3¬ª ¬´–∫–æ–ª-—Å—Ç–≤–æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π¬ª</code> üì¶üí∞""",
                            parse_mode="html")
        # print(e)


@dp.callback_query_handler(lambda c: c.data.startswith('buy_box_'))
async def buy_box_query(c: types.CallbackQuery):
    box_number = c.data.split("_")[2]
    box_price = c.data.split("_")[3]
    count = c.data.split("_")[4]

    users.cursor.execute(
        f"UPDATE users SET balance = balance - {int(box_price) * int(count)} WHERE id = ?",
        (c.message.reply_to_message.from_user.id, ))
    users.cursor.execute(
        f"UPDATE users SET boxes{box_number} = boxes{box_number} + {count} WHERE id = ?",
        (c.message.reply_to_message.from_user.id, ))
    users.connect.commit()

    b_p = int(box_price) * int(count)

    await c.message.answer(
        f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—å <code>¬´{str(box_number)}¬ª</code> üì¶ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ <code>{str(count)}</code> –∑–∞ <code>{str(b_p)}</code> üí∞.",
        parse_mode="html")
    await bot.delete_message(c.message.chat.id, c.message.message_id)


@dp.callback_query_handler(lambda c: c.data == 'cancel')
async def buy_box_query(c: types.CallbackQuery):
    await c.message.answer(f"–û—Ç–º–µ–Ω–µ–Ω–æ!")
    await bot.delete_message(c.message.chat.id, c.message.message_id)


#–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –º–æ–Ω–µ—Ç–∞–º–∏
@dp.message_handler(regexp=r"(^–í—ã–¥–∞—Ç—å|–≤—ã–¥–∞—Ç—å) ?(\d+)?")
async def vidat(message: types.Message):
    command_parse = re.compile(r"(^–í—ã–¥–∞—Ç—å|–≤—ã–¥–∞—Ç—å) ?(\d+)?")
    parsed = command_parse.match(message.text)
    suma = parsed.group(2)
    name1 = message.from_user.get_mention(as_html=True)
    name2 = message.reply_to_message.from_user.get_mention(as_html=True)
    data = {}
    data["suma"] = suma
    data['user_id'] = message.reply_to_message.from_user.id
    stts = users.cursor.execute("SELECT status from users where id = ?",
                                (message.from_user.id, )).fetchone()
    status = (stts[0])
    if str(status) == '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä':
        users.cursor.execute(
            """UPDATE users SET balance = balance + :suma WHERE id = :user_id;""",
            data)
        await message.answer(
            f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {name1} –≤—ã–¥–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {name2} - <code>{suma}</code> üí∞",
            parse_mode='html')
        await bot.send_message(
            -5695410762,
            f'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {name1} –≤—ã–¥–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {name2} - <code>{suma}</code>üí∞'
        )
    elif str(status) == '–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞':
        users.cursor.execute(
            """UPDATE users SET balance = balance + :suma WHERE id = :user_id;""",
            data)
        await message.answer(
            f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {name1} –≤—ã–¥–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {name2} - <code>{suma}</code> üí∞",
            parse_mode='html')
        await bot.send_message(
            -5695410762,
            f'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {name1} –≤—ã–¥–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {name2} - <code>{suma}</code>üí∞'
        )
    else:
        await message.answer(
            f"{name1} —É —Ç–µ–±—è –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ —á—Ç–æ–±—ã –≤—ã–¥–∞–≤–∞—Ç—å –º–æ–Ω–µ—Ç—ã ",
            parse_mode='html')
        users.connect.commit()


@dp.message_handler(regexp=r"(–ó–∞–±—Ä–∞—Ç—å) ?(\d+)?")
async def vidat(message: types.Message):
    command_parse = re.compile(r"(–ó–∞–±—Ä–∞—Ç—å) ?(\d+)?")
    parsed = command_parse.match(message.text)
    suma = parsed.group(2)
    name1 = message.from_user.get_mention(as_html=True)
    name2 = message.reply_to_message.from_user.get_mention(as_html=True)
    data = {}
    data["suma"] = suma
    data['user_id'] = message.reply_to_message.from_user.id
    stts = users.cursor.execute("SELECT status from users where id = ?",
                                (message.from_user.id, )).fetchone()
    status = (stts[0])
    if str(status) == '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä':
        users.cursor.execute(
            """UPDATE users SET balance = balance - :suma WHERE id = :user_id;""",
            data)
        await message.answer(
            f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {name1} –∑–∞–±—Ä–∞–ª —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name2} - <code>{suma}</code>üí∞",
            parse_mode='html')
        await bot.send_message(
            -5695410762,
            f'{name1} –∑–∞–±—Ä–∞–ª —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name2} - <code>{suma}</code> üí∞')
    elif str(status) == '–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞':
        users.cursor.execute(
            """UPDATE users SET balance = balance - :suma WHERE id = :user_id;""",
            data)
        await message.answer(
            f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {name1} –∑–∞–±—Ä–∞–ª —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name2} - <code>{suma}</code> üí∞",
            parse_mode='html')
        await bot.send_message(
            -5695410762,
            f'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {name1} –∑–∞–±—Ä–∞–ª —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name2} - <code>{suma}</code> üí∞'
        )
    else:
        await message.answer(
            f"{name1} —É —Ç–µ–±—è –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ —á—Ç–æ–±—ã –∑–∞–±–∏—Ä–∞—Ç—å –º–æ–Ω–µ—Ç—ã ",
            parse_mode='html')
        users.connect.commit()


@dp.message_handler(commands=['setbal'])
async def setbal(message: types.Message):
    args = message.get_args()
    users.cursor.execute("SELECT balance FROM users WHERE id=?",
                         (message.from_user.id, ))
    data = users.cursor.fetchone()
    if data is None:
        await message.reply("–ù–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
    stts = users.cursor.execute("SELECT status from users where id = ?",
                                (message.from_user.id, )).fetchone()
    status = (stts[0])
    if str(status) == '–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞':
        reply = message.reply_to_message
        if reply:
            replyuser = reply.from_user
            users.cursor.execute(f'UPDATE users SET balance=? WHERE id=?', (
                args,
                replyuser.id,
            ))
            users.connect.commit()
            await message.reply(
                f"–ë–∞–ª–∞–Ω—Å {replyuser.full_name}, –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {args}üí∞")
        else:
            await message.reply("–ù–µ–æ–±—Ö–æ–¥–∏–º —Ä–µ–ø–ª–∞–π!")
    else:
        return await message.reply(
            "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –º–µ–Ω—è—Ç—å –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!"
        )


#–°–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–≥–æ–≤
@dp.message_handler(commands=['own', 'owner'], commands_prefix='+!./')
async def ownerka(message: types.Message):
    user_id = message.from_user.id
    name = message.reply_to_message.from_user.full_name
    rank = "–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞"
    stat = users.cursor.execute("SELECT status from users where id = ?",
                                (message.from_user.id, )).fetchone()
    stat = (stat[0])
    if stat == '–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞':
        await message.answer(f'‚úÖ | {name} –ø–æ–ª—É—á–∏–ª(-–∞) —Å—Ç–∞—Ç—É—Å ¬´–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞¬ª')
        users.cursor.execute(f'UPDATE users SET status=? WHERE id=?', (
            rank,
            message.reply_to_message.from_user.id,
        ))
        users.connect.commit()
    else:
        await message.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ ‚ùé')


@dp.message_handler(commands=['adm', 'adminka'], commands_prefix='+!./')
async def adminka(message: types.Message):
    id = message.from_user.id
    name = message.reply_to_message.from_user.full_name
    rank = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    stat = users.cursor.execute("SELECT status from users where id = ?",
                                (message.from_user.id, )).fetchone()
    stat = (stat[0])
    if stat == '–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞':
        await message.answer(f'‚úÖ | {name} –ø–æ–ª—É—á–∏–ª(-–∞) —Å—Ç–∞—Ç—É—Å ¬´–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä¬ª')
        users.cursor.execute(f'UPDATE users SET status=? WHERE id=?', (
            rank,
            message.reply_to_message.from_user.id,
        ))
        users.connect.commit()
    elif stat == '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä':
        await message.answer(f'‚úÖ | {name} –ø–æ–ª—É—á–∏–ª(-–∞) —Å—Ç–∞—Ç—É—Å ¬´–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä¬ª')
        users.cursor.execute(f'UPDATE users SET status=? WHERE id=?', (
            rank,
            message.reply_to_message.from_user.id,
        ))
        users.connect.commit()
    else:
        await message.reply('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ ‚ùé')


@dp.message_handler(commands=['vip', 'vipka'], commands_prefix='+!./')
async def vipka(message: types.Message):
    id = message.from_user.id
    name = message.reply_to_message.from_user.full_name
    rank = "–ê–∫—Ç–∏–≤–µ–Ω"
    vip = users.cursor.execute("SELECT vip from users where id = ?",
                               (message.from_user.id, )).fetchone()
    vip = (vip[0])
    stat = users.cursor.execute("SELECT status from users where id = ?",
                                (message.from_user.id, )).fetchone()
    stat = (stat[0])
    if stat == '–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞':
        await message.answer(f'{name} –ø–æ–ª—É—á–∏–ª(-–∞) VIP —Å—Ç–∞—Ç—É—Å ‚úÖ')
        users.cursor.execute(f'UPDATE users SET vip=? WHERE id=?', (
            rank,
            message.reply_to_message.from_user.id,
        ))
        users.connect.commit()
    elif stat == '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä':
        await message.answer(f'{name} –ø–æ–ª—É—á–∏–ª(-–∞) VIP —Å—Ç–∞—Ç—É—Å ‚úÖ')
        users.cursor.execute(f'UPDATE users SET vip=? WHERE id=?', (
            rank,
            message.reply_to_message.from_user.id,
        ))
        users.connect.commit()
    else:
        await message.reply('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–¥–∞–≤–∞—Ç—å VIP —Å—Ç–∞—Ç—É—Å—ã ‚ùé')


@dp.message_handler(commands=['sponsor', 'sponsorka'], commands_prefix='+!./')
async def sponsorka(message: types.Message):
    id = message.from_user.id
    name = message.reply_to_message.from_user.full_name
    rank = "–°–ø–æ–Ω—Å–æ—Ä –±–æ—Ç–∞"
    stat = users.cursor.execute("SELECT status from users where user_id = ?",
                                (message.from_user.id, )).fetchone()
    stat = (stat[0])
    if stat == '–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞':
        await message.answer(f'‚úÖ | {name} –ø–æ–ª—É—á–∏–ª(-–∞) —Å—Ç–∞—Ç—É—Å ¬´–°–ø–æ–Ω—Å–æ—Ä –±–æ—Ç–∞¬ª')
        users.cursor.execute(f'UPDATE users SET status=? WHERE id=?', (
            rank,
            message.reply_to_message.from_user.id,
        ))
    elif stat == '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä':
        await message.answer(f'‚úÖ | {name} –ø–æ–ª—É—á–∏–ª(-–∞) —Å—Ç–∞—Ç—É—Å ¬´–°–ø–æ–Ω—Å–æ—Ä –±–æ—Ç–∞¬ª')
        users.cursor.execute(f'UPDATE users SET status=? WHERE id=?', (
            rank,
            message.reply_to_message.from_user.id,
        ))
        users.connect.commit()
    else:
        await message.reply('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ ‚ùé')


@dp.message_handler(commands=['member', 'memberka'], commands_prefix='+!./')
async def memberka(message: types.Message):
    id = message.from_user.id
    name = message.reply_to_message.from_user.full_name
    rank = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    stat = users.cursor.execute("SELECT status from users where id = ?",
                                (message.from_user.id, )).fetchone()
    stat = (stat[0])
    if stat == '–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞':
        await message.answer(f'{name} —Ä–∞–∑–∂–∞–ª–æ–≤–∞–Ω')
        users.cursor.execute(f'UPDATE users SET status=? WHERE id=?', (
            rank,
            message.reply_to_message.from_user.id,
        ))
        users.connect.commit()
    else:
        await message.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!')


#–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
@dp.message_handler(commands=['–º—É—Ç', 'mute'],
                    commands_prefix='!?./',
                    is_chat_admin=True)
async def mute(message):
    if not message.reply_to_message:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
        return
    try:
        muteint = int(message.text.split()[1])
        mutetype = message.text.split()[2]
        comment = " ".join(message.text.split()[3:])
    except IndexError:
        await message.reply(
            '–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!\n–ü—Ä–∏–º–µ—Ä:\n<code>/–º—É—Ç 1 —á –ø—Ä–∏—á–∏–Ω–∞</code>')
        return
    if mutetype == "—á" or mutetype == "—á–∞—Å–æ–≤" or mutetype == "—á–∞—Å":
        await bot.restrict_chat_member(
            message.chat.id,
            message.reply_to_message.from_user.id,
            types.ChatPermissions(False),
            until_date=datetime.timedelta(hours=muteint))
        await message.reply(
            f'–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: <a href="tg://?id={message.from_user.id}">{message.from_user.first_name}</a>\n–ó–∞–º—É—Ç–∏–ª: <a href="tg://user?id={message.reply_to_message.from_user.id}">{message.reply_to_message.from_user.first_name}</a>\nID –Ω–∞–∫–∞–∑—É–µ–º–æ–≥–æ: {message.reply_to_message.from_user.id}\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞: {muteint} {mutetype}\n–ü—Ä–∏—á–∏–Ω–∞: {comment}'
        )
    if mutetype == "–º" or mutetype == "–º–∏–Ω—É—Ç" or mutetype == "–º–∏–Ω—É—Ç—ã":
        await bot.restrict_chat_member(
            message.chat.id,
            message.reply_to_message.from_user.id,
            types.ChatPermissions(False),
            until_date=datetime.timedelta(minutes=muteint))
        await message.reply(
            f'–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: <a href="tg://?id={message.from_user.id}">{message.from_user.first_name}</a>\n–ó–∞–º—É—Ç–∏–ª: <a href="tg://user?id={message.reply_to_message.from_user.id}">{message.reply_to_message.from_user.first_name}</a>\nID –Ω–∞–∫–∞–∑—É–µ–º–æ–≥–æ: {message.reply_to_message.from_user.id}\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞: {muteint} {mutetype}\n–ü—Ä–∏—á–∏–Ω–∞: {comment}'
        )
    if mutetype == "–¥" or mutetype == "–¥–Ω–µ–π" or mutetype == "–¥–µ–Ω—å":
        await bot.restrict_chat_member(
            message.chat.id,
            message.reply_to_message.from_user.id,
            types.ChatPermissions(False),
            until_date=datetime.timedelta(days=muteint))
        await message.reply(
            f'–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: <a href="tg://?id={message.from_user.id}">{message.from_user.first_name}</a>\n–ó–∞–º—É—Ç–∏–ª: <a href="tg://user?id={message.reply_to_message.from_user.id}">{message.reply_to_message.from_user.first_name}</a>\nID –Ω–∞–∫–∞–∑—É–µ–º–æ–≥–æ: {message.reply_to_message.from_user.id}\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞: {muteint} {mutetype}\n–ü—Ä–∏—á–∏–Ω–∞: {comment}'
        )


@dp.message_handler(commands=['–∞–Ω–º—É—Ç', '—Ä–∞–∑–º—É—Ç', 'unmute'],
                    commands_prefix='!?./',
                    is_chat_admin=True)
async def unmute(message):
    if not message.reply_to_message:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
        return
    await bot.restrict_chat_member(
        message.chat.id, message.reply_to_message.from_user.id,
        types.ChatPermissions(True, True, True, True))
    await message.reply(
        f'–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: <a href="tg://?id={message.from_user.id}">{message.from_user.first_name}</a>\n–†–∞–∑–º—É—Ç–∏–ª: <a href="tg://user?id={message.reply_to_message.from_user.id}">{message.reply_to_message.from_user.first_name}</a>'
    )


@dp.message_handler(commands=['ban', '–±–∞–Ω', '–∫–∏–∫', 'kick'],
                    commands_prefix='!?./',
                    is_chat_admin=True)
async def ban(message):
    if not message.reply_to_message:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
        return
    comment = " ".join(message.text.split()[1:])
    await bot.kick_chat_member(message.chat.id,
                               message.reply_to_message.from_user.id,
                               types.ChatPermissions(False))
    await message.reply(
        f'–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: <a href="tg://?id={message.from_user.id}">{message.from_user.first_name}</a>\n–ó–∞–±–∞–Ω–∏–ª: <a href="tg://user?id={message.reply_to_message.from_user.id}">{message.reply_to_message.from_user.first_name}</a>\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –Ω–∞–≤—Å–µ–≥–¥–∞\n–ü—Ä–∏—á–∏–Ω–∞: {comment}'
    )


@dp.message_handler(commands=['—Ä–∞–∑–±–∞–Ω', 'unban'],
                    commands_prefix='!?./',
                    is_chat_admin=True)
async def unban(message):
    if not message.reply_to_message:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
        return
    await bot.restrict_chat_member(
        message.chat.id, message.reply_to_message.from_user.id,
        types.ChatPermissions(True, True, True, True))
    await message.reply(
        f'–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: <a href="tg://?id={message.from_user.id}">{message.from_user.first_name}</a>\n–†–∞–∑–±–∞–Ω–∏–ª: <a href="tg://user?id={message.reply_to_message.from_user.id}">{message.reply_to_message.from_user.first_name}</a>'
    )


#–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message_handler(
    chat_type=[types.ChatType.SUPERGROUP, types.ChatType.GROUP],
    commands=['del'],
    commands_prefix='!/')
async def delete_message(message: types.Message):
    admins_list = [
        admin.user.id
        for admin in await bot.get_chat_administrators(chat_id=message.chat.id)
    ]
    if message.from_user.id in admins_list:
        msg_id = message.reply_to_message.message_id
        await bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
        await bot.delete_message(chat_id=message.chat.id,
                                 message_id=message.message_id)


#–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞
@dp.message_handler(commands=["staff"], commands_prefix=['/', '!', '.'])
async def staff_cmd(message: types.Message):
    adm = ""
    if message.chat.type == 'private':
        pass
    else:
        admins_id = [(admin.user.id)
                     for admin in await bot.get_chat_administrators(
                         chat_id=message.chat.id)]
        admins_name = [(admin.user.full_name)
                       for admin in await bot.get_chat_administrators(
                           chat_id=message.chat.id)]
        admin_prefix = [(admin.custom_title)
                        for admin in await bot.get_chat_administrators(
                            chat_id=message.chat.id)]
        for user in admins_id:
            adm += f"<a href='tg://openmessage?user_id={user}'> {admins_name[admins_id.index(user)]}</a> ¬ª {admin_prefix[admins_id.index(user)]} " + str(
                '\n')
        await message.answer('<b><i>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —á–∞—Ç–∞:</i></b>\n' +
                             str(adm.replace('None', '–ê–¥–º–∏–Ω')),
                             parse_mode='html')


#led
@dp.message_handler(commands=['led', '–ª–µ–¥–µ–Ω–µ—Ü', 'candy'],
                    commands_prefix='+!./')
async def cmd_candy(message: types.Message):
    msg = message
    id = msg['from']['id']
    users.cursor.execute(f"SELECT led_time FROM users WHERE id = '{id}'")
    ltime = users.cursor.fetchone()[0]
    current_date_time = datetime.datetime.now()
    current_time = current_date_time.time()
    name = message.from_user.get_mention(as_html=True)
    q = current_time.strftime('%H:%M:%S')
    a, b, t1, t2 = f'{ltime}'.split(':'), f'{q}'.split(':'), 0, 0
    for i in range(2, -1, -1):
        t1, t2 = t1 + 60**i * int(a[2 - i]), t2 + 60**i * int(b[2 - i])
    a = (86400 - t1) * int(t2 < t1) + t2 - t1 * int(not (t2 < t1))
    if a >= 10800:
        dick = str(randint(1, 10))
        data = {}
        data["rand"] = (dick)
        data['user_id'] = message.from_user.id
        ledenec = users.cursor.execute("SELECT led from users where id = ?",
                                       (message.from_user.id, )).fetchone()
        led = (ledenec[0])
        await message.answer(
            f'{name}, —Ç–≤–æ–π —á–ª–µ–Ω - {led} —Å–º. —É–≤–µ–ª–∏—á–∏–ª—Å—è –Ω–∞ {dick} —Å–º. üç≠\n–°–ª–µ–¥—É—é—â–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞',
            parse_mode='html')
        users.cursor.execute(
            """UPDATE users SET led = led + :rand WHERE id = :user_id;""",
            data)
        users.cursor.execute('UPDATE users SET led_time = ? WHERE id = ?',
                             (q, id))
        users.connect.commit()
    else:
        await message.reply(f'–£–≤–µ–ª–∏—á–∏–≤–∞—Ç—å üç≠ –º–æ–∂–Ω–æ —Ä–∞–∑ –≤ 3 —á–∞—Å–∞, –ø—Ä–∏—Ö–æ–¥–∏ –ø–æ–∑–∂–µ!'
                            )


#marry
inline_btn_marry_y = InlineKeyboardButton('–î–∞ üíñ',
                                          callback_data='button_marry_y')
button_marry_y = InlineKeyboardMarkup().add(inline_btn_marry_y)

inline_btn_marry_n = InlineKeyboardButton('–ù–µ—Ç üíî',
                                          callback_data='button_marry_n')
button_marry_n = InlineKeyboardMarkup().add(inline_btn_marry_n)

button_marry = InlineKeyboardMarkup(row_width=1)
button_marry.row(inline_btn_marry_y, inline_btn_marry_n)

inline_btn_divorce_y = InlineKeyboardButton('–î–∞ üíî',
                                            callback_data='button_divorce_y')
button_divorce_y = InlineKeyboardMarkup().add(inline_btn_divorce_y)

inline_btn_divorce_n = InlineKeyboardButton('–ù–µ—Ç ‚ù§',
                                            callback_data='button_divorce_n')
button_divorce_n = InlineKeyboardMarkup().add(inline_btn_divorce_n)

button_divorce = InlineKeyboardMarkup(row_width=1)
button_divorce.row(inline_btn_divorce_y, inline_btn_divorce_n)

marry_me = []
marry_rep = []
divorce_me = []
divorce_rep = []


@dp.callback_query_handler(lambda c: c.data == "button_marry_y")
async def callback_marry_y(callback_query: types.CallbackQuery):
    try:
        user = await bot.get_chat(str(marry_me[0]))
    except:
        await bot.answer_callback_query(callback_query.id,
                                        text="–≠—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ",
                                        show_alert=True)
    replyuser = await bot.get_chat(str(marry_rep[0]))
    name = quote_html(user.full_name)
    rname = quote_html(replyuser.full_name)
    if callback_query.from_user.id == replyuser.id:
        users.cursor.execute(f'UPDATE users SET marry=? WHERE id=?', (
            replyuser.id,
            user.id,
        ))
        users.cursor.execute(f'UPDATE users SET marry_time=? WHERE id=?', (
            time.time(),
            user.id,
        ))

        users.cursor.execute(f'UPDATE users SET marry=? WHERE id=?', (
            user.id,
            replyuser.id,
        ))
        users.cursor.execute(f'UPDATE users SET marry_time=? WHERE id=?', (
            time.time(),
            replyuser.id,
        ))
        users.connect.commit()
        marry_me.clear()
        marry_rep.clear()
        await bot.delete_message(callback_query.message.chat.id,
                                 callback_query.message.message_id)
        await bot.send_message(
            callback_query.message.chat.id,
            f"<a href='tg://user?id={user.id}'>{name}</a> –∏ <a href='tg://user?id={replyuser.id}'>{rname}</a> —Ç–µ–ø–µ—Ä—å –≤ –±—Ä–∞–∫–µ üíûÔ∏è"
        )
    else:
        await bot.answer_callback_query(callback_query.id,
                                        text="–ù–µ —Ç—Ä–æ–≥–∞–π!",
                                        show_alert=True)


@dp.callback_query_handler(lambda c: c.data == "button_marry_n")
async def callback_marry_n(callback_query: types.CallbackQuery):
    try:
        user = await bot.get_chat(str(marry_me[0]))
    except:
        await bot.answer_callback_query(callback_query.id,
                                        text="–≠—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ",
                                        show_alert=True)
    replyuser = await bot.get_chat(str(marry_rep[0]))
    if callback_query.from_user.id == replyuser.id:
        name = quote_html(user.full_name)
        marry_me.clear()
        marry_rep.clear()
        await bot.delete_message(callback_query.message.chat.id,
                                 callback_query.message.message_id)
        await bot.send_message(
            callback_query.message.chat.id,
            f"<a href='tg://user?id={user.id}'>{name}</a>, —Å–æ–∂–∞–ª–µ–µ–º –Ω–æ –≤–∞–º –æ—Ç–∫–∞–∑–∞–ª–∏ üíî"
        )
    else:
        await bot.answer_callback_query(callback_query.id,
                                        text="–ù–µ —Ç—Ä–æ–≥–∞–π!",
                                        show_alert=True)


@dp.callback_query_handler(lambda c: c.data == "button_divorce_y")
async def callback_divorce_y(callback_query: types.CallbackQuery):
    try:
        user = await bot.get_chat(str(divorce_me[0]))
    except:
        await bot.answer_callback_query(callback_query.id,
                                        text="–≠—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ",
                                        show_alert=True)

    if callback_query.from_user.id == user.id:
        replyuser = await bot.get_chat(str(divorce_rep[0]))
        name = quote_html(user.full_name)
        get = users.cursor.execute("SELECT marry_time FROM users WHERE id=?",
                                   (user.id, )).fetchall()
        mtime = f"{int(get[0][0])}"
        marry_time = time.time() - float(mtime)
        vremya = strftime("%j –¥ %H —á %M –º–∏–Ω", gmtime(marry_time))
        users.cursor.execute(f'UPDATE users SET marry=? WHERE id=?', (
            0,
            user.id,
        ))
        users.cursor.execute(f'UPDATE users SET marry_time=? WHERE id=?', (
            0,
            user.id,
        ))

        users.cursor.execute(f'UPDATE users SET marry=? WHERE id=?', (
            0,
            replyuser.id,
        ))
        users.cursor.execute(f'UPDATE users SET marry_time=? WHERE id=?', (
            0,
            replyuser.id,
        ))
        users.connect.commit()
        divorce_me.clear()
        divorce_rep.clear()
        await bot.delete_message(callback_query.message.chat.id,
                                 callback_query.message.message_id)
        await bot.send_message(
            callback_query.message.chat.id,
            f"<a href='tg://user?id={user.id}'>{name}</a>, –≤–∞—à –±—Ä–∞–∫ —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç!\n"
            f"–û–Ω –ø—Ä–æ—Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª {vremya}")
    else:
        await bot.answer_callback_query(callback_query.id,
                                        text="–ù–µ —Ç—Ä–æ–≥–∞–π!",
                                        show_alert=True)


@dp.callback_query_handler(lambda c: c.data == "button_divorce_n")
async def callback_divorce_n(callback_query: types.CallbackQuery):
    try:
        user = await bot.get_chat(str(divorce_me[0]))
    except:
        await bot.answer_callback_query(callback_query.id,
                                        text="–≠—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ!",
                                        show_alert=True)
    if callback_query.from_user.id == user.id:
        divorce_me.clear()
        divorce_rep.clear()
        await bot.delete_message(callback_query.message.chat.id,
                                 callback_query.message.message_id)
    else:
        await bot.answer_callback_query(callback_query.id,
                                        text="–ù–µ —Ç—Ä–æ–≥–∞–π!",
                                        show_alert=True)


#–ë—Ä–∞–∫
@dp.message_handler(lambda msg: msg.text.lower() == '–±—Ä–∞–∫')
async def cmd_marry(message: types.Message):
    marry_me.clear()
    marry_rep.clear()
    user = message.from_user
    name = quote_html(user.full_name)
    reply = message.reply_to_message
    if reply:
        replyuser = reply.from_user
        rname = quote_html(replyuser.full_name)
        marry = users.cursor.execute("SELECT marry from users where id = ?",
                                     (message.from_user.id, )).fetchone()
        marry = (marry[0])
        if marry == 0:
            if replyuser.id == user.id:
                return await message.reply(
                    f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –±—Ä–∞–∫ —Å —Å–∞–º–∏–º —Å–æ–±–æ–π üíî")
            else:
                marry_me.append(user.id)
                marry_rep.append(replyuser.id)
                await bot.send_message(
                    message.chat.id,
                    f"<a href='tg://user?id={replyuser.id}'>{rname}</a>, –≤—ã –≥–æ—Ç–æ–≤—ã –∑–∞–∫–ª—é—á–∏—Ç—å –±—Ä–∞–∫ —Å <a href='tg://user?id={user.id}'>{name}</a> ?",
                    reply_markup=button_marry)

        else:
            marry = users.cursor.execute("SELECT marry FROM users WHERE id=?",
                                         (user.id, )).fetchall()
            marred = await bot.get_chat(str(marry[0][0]))
            mname = quote_html(marred.full_name)
            return await message.reply(f"–í—ã —É–∂–µ –≤ –±—Ä–∞–∫–µ —Å {mname} ‚ù§Ô∏è")


#–†–∞–∑–≤–æ–¥
@dp.message_handler(lambda msg: msg.text.lower() == '—Ä–∞–∑–≤–æ–¥')
async def cmd_divorce(message: types.Message):
    user = message.from_user
    name = quote_html(user.full_name)
    marry = users.cursor.execute("SELECT marry from users where id = ?",
                                 (message.from_user.id, )).fetchone()
    marry = (marry[0])
    if marry == 0:
        return await message.reply(f"–£ –≤–∞—Å –Ω–µ—Ç –±—Ä–∞–∫–∞ üíî")
    else:
        marry = users.cursor.execute("SELECT marry FROM users WHERE id=?",
                                     (user.id, )).fetchall()
        marred = await bot.get_chat(str(marry[0][0]))
        mname = quote_html(marred.full_name)
        divorce_me.append(user.id)
        divorce_rep.append(marred.id)
        await bot.send_message(
            message.chat.id,
            f"<a href='tg://user?id={user.id}'>{name}</a>, –≤—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å—Å—Ç–æ—Ä–≥–Ω—É—Ç—å –±—Ä–∞–∫ —Å <a href='tg://user?id={marred.id}'>{mname}</a> ? üíî",
            reply_markup=button_divorce)


@dp.message_handler(Text(equals="–ú–æ–π –±—Ä–∞–∫"))
async def my_marry(message: types.Message):
    marry = users.cursor.execute("SELECT marry from users where id = ?",
                                 (message.from_user.id, )).fetchone()
    marry = (marry[0])
    if marry == 0:
        await message.reply(f"–í—ã –Ω–µ –≤ –±—Ä–∞–∫–µ!")
    else:
        marry = users.cursor.execute("SELECT marry FROM users WHERE id=?",
                                     (message.from_user.id, )).fetchall()
        marred = await bot.get_chat(marry)
        mname = quote_html(marred.full_name)
        await message.reply(f"–í—ã –≤ –±—Ä–∞–∫–µ —Å {mname} ‚ù§Ô∏è")


#echo_message
@dp.message_handler()
async def echo_message(message: types.Message):
    data = {}
    data['chat_id'] = message.chat.id
    data1 = {}
    data1['user_id'] = message.from_user.id
    chats.cursor.execute(
        """UPDATE chats SET chatwords = chatwords + 1 WHERE chatid = :chat_id;""",
        data)
    chats.connect.commit()
    users.cursor.execute(
        """UPDATE users SET words = words + 1 WHERE id = :user_id;""", data1)
    users.connect.commit()

    if message.text.lower() == '–±–∞–ª–∞–Ω—Å' or message.text.lower() == '–±':
        balanc = users.cursor.execute("SELECT balance from users where id = ?",
                                      (message.from_user.id, )).fetchone()
        balance = (balanc[0])
        await message.reply(f'–í–∞—à –±–∞–ª–∞–Ω—Å: <code>{balance}</code> üí∞')

    elif message.text.lower() == '+':
        name2 = message.reply_to_message.from_user.get_mention(as_html=True)
        data = {}
        data['user_id'] = message.reply_to_message.from_user.id
        respect = users.cursor.execute(
            "SELECT respect from users where id = ?",
            (message.from_user.id, )).fetchone()
        respect = (respect[0])
        if message['reply_to_message']['from']['id'] == message['from']['id']:
            pass
        else:
            users.cursor.execute(
                """UPDATE users SET respect = respect + 1 WHERE id = :user_id;""",
                data)
            rep = message.reply_to_message.from_user.id
            await message.answer(
                f'–¢—ã –ø–æ–ª—É—á–∏–ª(–∞) —É–≤–∞–∂–µ–Ω–∏–µ: <a href="tg://user?id={rep}">+1</a>')

    elif message.text.lower() == '++':
        name2 = message.reply_to_message.from_user.get_mention(as_html=True)
        data = {}
        data['user_id'] = message.reply_to_message.from_user.id
        respect = users.cursor.execute(
            "SELECT respect from users where id = ?",
            (message.from_user.id, )).fetchone()
        respect = (respect[0])
        if message['reply_to_message']['from']['id'] == message['from']['id']:
            pass
        else:
            users.cursor.execute(
                """UPDATE users SET respect = respect + 2 WHERE id = :user_id;""",
                data)
            rep = message.reply_to_message.from_user.id
            await message.answer(
                f'–¢—ã –ø–æ–ª—É—á–∏–ª(–∞) —É–≤–∞–∂–µ–Ω–∏–µ: <a href="tg://user?id={rep}">+2</a>')

    elif message.text.lower() == '+++':
        name2 = message.reply_to_message.from_user.get_mention(as_html=True)
        data = {}
        data['user_id'] = message.reply_to_message.from_user.id
        respect = users.cursor.execute(
            "SELECT respect from users where id = ?",
            (message.from_user.id, )).fetchone()
        respect = (respect[0])
        if message['reply_to_message']['from']['id'] == message['from']['id']:
            pass
        else:
            users.cursor.execute(
                """UPDATE users SET respect = respect + 3 WHERE id = :user_id;""",
                data)
            rep = message.reply_to_message.from_user.id
            await message.answer(
                f'–¢—ã –ø–æ–ª—É—á–∏–ª(–∞) —É–≤–∞–∂–µ–Ω–∏–µ: <a href="tg://user?id={rep}">+3</a>')

    elif message.text.lower() == 'üëç':
        name2 = message.reply_to_message.from_user.get_mention(as_html=True)
        data = {}
        data['user_id'] = message.reply_to_message.from_user.id
        respect = users.cursor.execute(
            "SELECT respect from users where id = ?",
            (message.from_user.id, )).fetchone()
        respect = (respect[0])
        if message['reply_to_message']['from']['id'] == message['from']['id']:
            pass
        else:
            users.cursor.execute(
                """UPDATE users SET respect = respect + 1 WHERE id = :user_id;""",
                data)
            rep = message.reply_to_message.from_user.id
            await message.answer(
                f'–¢—ã –ø–æ–ª—É—á–∏–ª(–∞) —É–≤–∞–∂–µ–Ω–∏–µ: <a href="tg://user?id={rep}">+1</a>')

    elif message.text.lower() == '–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å':
        name1 = message.from_user.get_mention(as_html=True)
        name2 = message.reply_to_message.from_user.get_mention(as_html=True)
        emoji = ['ü•∫', '‚ù§', 'üòä', 'ü•∞', 'üòò']
        remoji = random.choice(emoji)
        await message.reply(f"{name1}\n–ø–æ—Ü–µ–ª–æ–≤–∞–ª(-–∞) {remoji}\n{name2}")
    elif message.text.lower() == '‚ù§':
        name1 = message.from_user.get_mention(as_html=True)
        name2 = message.reply_to_message.from_user.get_mention(as_html=True)
        await message.answer(f'{name1} –ø—Ä–∏–∑–Ω–∞–ª—Å—è(-–ª–∞—Å—å) –≤ –ª—é–±–≤–∏ {name2}')
    elif message.text.lower() == '–≤—Å–µ–º –ø—Ä–∏–≤–µ—Ç':
        name1 = message.from_user.get_mention(as_html=True)
        await message.answer(
            f"{name1} –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª(-–∞) –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ ‚ú®",
            parse_mode='html')
    elif message.text.lower() == '–ø—Ä–∏–≤–µ—Ç –≤—Å–µ–º':
        name1 = message.from_user.get_mention(as_html=True)
        await message.answer(
            f"{name1} –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª(-–∞) –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ ‚ú®",
            parse_mode='html')
    elif message.text.lower() == '–≤—Å–µ–º –ø–æ–∫–∞':
        name1 = message.from_user.get_mention(as_html=True)
        await message.answer(
            f"{name1} –ø–æ–ø—Ä–æ—â–∞–ª—Å—è(-–∞—Å—å) —Å–æ –≤—Å–µ–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ —á–∞—Ç–∞ ‚ú®",
            parse_mode='html')
    elif message.text.lower() == '–ø–æ–∫–∞ –≤—Å–µ–º':
        name1 = message.from_user.get_mention(as_html=True)
        await message.answer(
            f"{name1} –ø–æ–ø—Ä–æ—â–∞–ª—Å—è(-–∞—Å—å) —Å–æ –≤—Å–µ–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ —á–∞—Ç–∞ ‚ú®",
            parse_mode='html')
    elif message.text.lower() == '—Ä–∞—Å–µ–Ω–≥–∞–Ω':
        name1 = message.from_user.get_mention(as_html=True)
        name2 = message.reply_to_message.from_user.get_mention(as_html=True)
        await message.reply(f"{name1} —ë–±–Ω—É–ª(-–∞) —Ä–∞—Å–µ–Ω–≥–∞–Ω–æ–º –ø–æ {name2}",
                            parse_mode='html')
    elif message.text.lower() == '–≥–µ—Ç—Å—É–≥–∞':
        name1 = message.from_user.get_mention(as_html=True)
        name2 = message.reply_to_message.from_user.get_mention(as_html=True)
        await message.reply(f"{name1} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª(-–∞) –≥–µ—Ç—Å—É–≥—É –Ω–∞ {name2}",
                            parse_mode='html')
    elif message.text.lower() == '—á–º–æ–∫':
        name1 = message.from_user.get_mention(as_html=True)
        name2 = message.reply_to_message.from_user.get_mention(as_html=True)
        await message.reply(f"{name1} —á–º–æ–∫–Ω—É–ª(-–∞) {name2}", parse_mode='html')
    elif message.text.lower() == '—á–ø–æ–∫':
        name1 = message.from_user.get_mention(as_html=True)
        name2 = message.reply_to_message.from_user.get_mention(as_html=True)
        await message.reply(f"{name1} —á–ø–æ–∫–Ω—É–ª(-–∞) {name2}", parse_mode='html')
    elif message.text.lower() == '–ø–Ω—É—Ç—å':
        name1 = message.from_user.get_mention(as_html=True)
        name2 = message.reply_to_message.from_user.get_mention(as_html=True)
        await message.reply(f"{name1} –ø–Ω—É–ª(-–∞) {name2}", parse_mode='html')
    elif message.text.lower() == '–ª–∏–∑–Ω—É—Ç—å':
        name1 = message.from_user.get_mention(as_html=True)
        name2 = message.reply_to_message.from_user.get_mention(as_html=True)
        await message.reply(f"{name1} –ª–∏–∑–Ω—É–ª(-–∞) {name2}", parse_mode='html')
    elif message.text.lower() == '–±–∞–Ω–∫–∞–π':
        name1 = message.from_user.get_mention(as_html=True)
        await message.reply(f"{name1}, –ø—Ä–∏–º–µ–Ω–∏–ª(-–∞) –±–∞–Ω–∫–∞–π!",
                            parse_mode='html')
    elif message.text.lower() == '–æ–±–Ω—è—Ç—å':
        name1 = message.from_user.get_mention(as_html=True)
        name2 = message.reply_to_message.from_user.get_mention(as_html=True)
        emoji = ['ü•∫', '‚ù§', 'üòä', 'ü•∞', 'üòò']
        remoji = random.choice(emoji)
        await message.reply(f"{name1}\n–æ–±–Ω—è–ª(-–∞) {remoji}\n{name2}",
                            parse_mode='html')
    elif message.text.lower() == '–∑–∞–µ–±–∞—à–∏—Ç—å':
        name1 = message.from_user.get_mention(as_html=True)
        name2 = message.reply_to_message.from_user.get_mention(as_html=True)
        e = ['–ª–æ–ø–∞—Ç–æ–π', '–∞—Ä–º–∞—Ç—É—Ä–æ–π', '—Ä–µ–∑–∏–Ω–æ–≤—ã–º —Ö—É—ë–º']
        i = random.choice(e)
        await message.reply(f"{name1}\n–∑–∞–µ–±–∞—à–∏–ª(-–∞) {i}\n{name2}",
                            parse_mode='html')
    elif message.text.lower() == '–æ—Ç—Å–æ—Å–∞—Ç—å':
        name1 = message.from_user.get_mention(as_html=True)
        name2 = message.reply_to_message.from_user.get_mention(as_html=True)
        await message.reply(f"{name1}\n–æ—Ç—Å–æ—Å–∞–ª(-–∞) —É\n{name2}",
                            parse_mode='html')
    elif message.text.lower() == '–æ—Ç–ª–∏–∑–∞—Ç—å':
        name1 = message.from_user.get_mention(as_html=True)
        name2 = message.reply_to_message.from_user.get_mention(as_html=True)
        await message.reply(f"{name1}\n–æ—Ç–ª–∏–∑–∞–ª(-–∞) —É\n{name2}",
                            parse_mode='html')
    elif message.text.lower() == '–º–∏–Ω–µ—Ç':
        name1 = message.from_user.get_mention(as_html=True)
        name2 = message.reply_to_message.from_user.get_mention(as_html=True)
        await message.reply(f"{name1} —Å–¥–µ–ª–∞–ª(-–∞) –º–∏–Ω–µ—Ç {name2}",
                            parse_mode='html')
    elif message.text.lower() == '—Ç—ã–∫':
        name1 = message.from_user.get_mention(as_html=True)
        name2 = message.reply_to_message.from_user.get_mention(as_html=True)
        t = ['–¥–æ–µ–±–∞–ª—Å—è(-–∞—Å—å) –¥–æ', '—Ç—ã–∫–Ω—É–ª(-–∞)']
        g = random.choice(t)
        await message.reply(f"{name1} {g} {name2}", parse_mode='html')
    elif message.text.lower() == '–æ—Ç–¥–∞—Ç—å—Å—è':
        name1 = message.from_user.get_mention(as_html=True)
        name2 = message.reply_to_message.from_user.get_mention(as_html=True)
        await message.reply(f"{name1}\n–æ—Ç–¥–∞–ª—Å—è(-–∞—Å—å)\n{name2}",
                            parse_mode='html')
    elif message.text.lower() == '—Ä–∞–∑–¥–µ—Ç—å':
        name1 = message.from_user.get_mention(as_html=True)
        name2 = message.reply_to_message.from_user.get_mention(as_html=True)
        await message.reply(f"{name1}\n—Ä–∞–∑–¥–µ–ª(-–∞)\n{name2}", parse_mode='html')


if __name__ == "__main__":
    keep_alive()
    executor.start_polling(dp, skip_updates=True)
